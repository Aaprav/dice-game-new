{"version":3,"file":"static/js/89.874e1a13.chunk.js","mappings":"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","sources":["pages/fractals/WebWorker.js","pages/fractals/worker.js","pages/fractals/helper.js","pages/fractals/index.jsx"],"sourcesContent":["export default class WebWorker {\r\n    constructor(worker) {\r\n        const code = worker.toString();\r\n        const blob = new Blob(['('+code+')()']);\r\n        return new Worker(URL.createObjectURL(blob));\r\n    }\r\n}\r\n","\r\n\r\n\r\n\r\n\r\nexport default () => {\r\n\r\n  const generateColors = (length) => {\r\n    let colors = [];\r\n    let hueIncrement = 360 / length;\r\n    let baseHue = Math.random() * 360; // Random starting hue\r\n    let toHex = x => Math.round(x * 255).toString(16).padStart(2, '0');\r\n    const hslToRgb = (h, s, l) => {\r\n      let r, g, b;\r\n      if (s == 0) {\r\n        r = g = b = l;\r\n      } else {\r\n        const hue2rgb = (p, q, t) => {\r\n          if (t < 0) t += 1;\r\n          if (t > 1) t -= 1;\r\n          if (t < 1 / 6) return p + (q - p) * 6 * t;\r\n          if (t < 1 / 2) return q;\r\n          if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\r\n          return p;\r\n        }\r\n        let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        let p = 2 * l - q;\r\n        r = hue2rgb(p, q, h + 1 / 3);\r\n        g = hue2rgb(p, q, h);\r\n        b = hue2rgb(p, q, h - 1 / 3);\r\n      }\r\n      return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\r\n    };\r\n    for (let i = 0; i < length; i++) {\r\n      let hue = (baseHue + i * hueIncrement) % 360; // Increment hue\r\n      let saturation = 50 + Math.random() * 20; // Adjust saturation for variety\r\n      let lightness = 50 + Math.random() * 20; // Adjust lightness for variety\r\n      let color = hslToRgb(hue / 360, saturation / 100, lightness / 100);\r\n      colors.push(color);\r\n    }\r\n    return colors;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const julia = (width,height) =>{\r\n    let maxIterations = 100;\r\n    let baseH = Math.round(Math.random()*160)+80;\r\n    let baseS = Math.round(Math.random()*10)+90;\r\n    let baseL = Math.round(Math.random()*10)+45;\r\n    function drawJulia(cx, cy) {\r\n      let x = 0;\r\n      let y = 0;\r\n      let iteration = 0;\r\n      while (x * x + y * y <= 4 && iteration < maxIterations) {\r\n        let xtemp = x * x - y * y + cx;\r\n        y = 2 * x * y + cy;\r\n        x = xtemp;\r\n        iteration++;\r\n      }\r\n      return iteration / maxIterations;\r\n    }\r\n    let data = new Array(width*height);\r\n    for (let i = 0; i < width; i++) {\r\n      for (let j = 0; j < height; j++) {\r\n        let x = (i - width / 2) / (width / 3);\r\n        let y = (j - height / 2) / (height / 3);\r\n        let  color = drawJulia(-0.65 + x,  0.0 +y);\r\n        data[j*width+i] = `hsla(${baseH*color}, ${baseS}%, ${baseL}%,${color!=1?1:0})`;\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  const sierpinski = (width, height) => {\r\n    let triangles = []\r\n    let maxDepth = 4+Math.round(Math.random()*2);\r\n    let colors = generateColors(maxDepth+1)\r\n    function generateTriangle(x1, y1, x2, y2, x3, y3, depth) {\r\n      if (depth === 0) {\r\n         triangles.push([{ x: x1, y: y1 }, { x: x2, y: y2 }, { x: x3, y: y3 },{color:colors[depth]}]);\r\n      } else {\r\n        let mid1x = (x1 + x2) / 2;\r\n        let mid1y = (y1 + y2) / 2;\r\n        let mid2x = (x2 + x3) / 2;\r\n        let mid2y = (y2 + y3) / 2;\r\n        let mid3x = (x1 + x3) / 2;\r\n        let mid3y = (y1 + y3) / 2;\r\n        generateTriangle(x1, y1, mid1x, mid1y, mid3x, mid3y, depth - 1);\r\n        generateTriangle(mid1x, mid1y, x2, y2, mid2x, mid2y, depth - 1);\r\n        generateTriangle(mid3x, mid3y, mid2x, mid2y, x3, y3, depth - 1);\r\n        triangles.push([{ x: mid1x, y: mid1y }, { x: mid2x, y: mid2y }, { x: mid3x, y: mid3y },{color:colors[depth]}]);\r\n      }\r\n    }\r\n    generateTriangle(50, height - 50, width - 50, height - 50, width / 2, 50, maxDepth);\r\n    return triangles;\r\n  }\r\n\r\n\r\n\r\n\r\n  function barnsleyFern(width, height) {\r\n    let points = [];\r\n    let x = 0;\r\n    let y = 0;\r\n    for (let i = 0; i < 200000; i++) {\r\n      let r = Math.random();\r\n      let newX, newY;\r\n      if (r < 0.01) {\r\n        newX = 0;\r\n        newY = 0.16 * y;\r\n      } else if (r < 0.86) {\r\n        newX = 0.85 * x + 0.04 * y;\r\n        newY = -0.04 * x + 0.85 * y + 1.6;\r\n      } else if (r < 0.93) {\r\n        newX = 0.20 * x - 0.26 * y;\r\n        newY = 0.23 * x + 0.22 * y + 1.6;\r\n      } else {\r\n        newX = -0.15 * x + 0.28 * y;\r\n        newY = 0.26 * x + 0.24 * y + 0.44;\r\n      }\r\n      x = newX;\r\n      y = newY;\r\n      let canvasX = Math.floor((x + 3) * width / 6);\r\n      let canvasY = Math.floor(height - (y * height / 11));\r\n      points.push({ x: canvasX, y: canvasY });\r\n    }\r\n    return points;\r\n  }\r\n\r\n\r\n\r\n\r\n  function kochSnowflake(width, height) {\r\n    let points = [];\r\n    let maxDepth = 3+Math.round(Math.random()*2);\r\n\r\n      function kochLine(x1, y1, x2, y2, depth) {\r\n        if (depth === 0) {\r\n          points.push({ x: x1, y: y1 });\r\n          points.push({ x: x2, y: y2 });\r\n        } else {\r\n          let deltaX = x2 - x1;\r\n          let deltaY = y2 - y1;\r\n          let x3 = x1 + deltaX / 3;\r\n          let y3 = y1 + deltaY / 3;\r\n          let x4 = 0.5 * (x1 + x2) + Math.sqrt(3) * (y1 - y2) / 6;\r\n          let y4 = 0.5 * (y1 + y2) + Math.sqrt(3) * (x2 - x1) / 6;\r\n          let x5 = x1 + 2 * deltaX / 3;\r\n          let y5 = y1 + 2 * deltaY / 3;\r\n          kochLine(x1, y1, x3, y3, depth - 1);\r\n          kochLine(x3, y3, x4, y4, depth - 1);\r\n          kochLine(x4, y4, x5, y5, depth - 1);\r\n          kochLine(x5, y5, x2, y2, depth - 1);\r\n        }\r\n      }\r\n    let centerX = width / 2;\r\n    let centerY = height / 2;\r\n    let size = Math.min(width, height)/2-50; // Adjust the scale as needed\r\n    let x1 = centerX;\r\n    let y1 = centerY - size;\r\n    let x2 = centerX - (Math.sqrt(3) / 2) * size;\r\n    let y2 = centerY + (size / 2);\r\n    let x3 = centerX + (Math.sqrt(3) / 2) * size;\r\n    let y3 = centerY + (size / 2);\r\n    kochLine(x1, y1, x2, y2, maxDepth);\r\n    kochLine(x2, y2, x3, y3, maxDepth);\r\n    kochLine(x3, y3, x1, y1, maxDepth);\r\n    return points;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  function treeFractal(width,height) {\r\n    let points = [];\r\n    let padding = 20;\r\n    let maxDepth = 9+Math.round(Math.random()*2);\r\n    let colors = generateColors(maxDepth)\r\n    function drawBranch(x, y, angle, length, depth) {\r\n      if (depth === 0) return;\r\n      let newX = x + length * Math.cos(angle);\r\n      let newY = y + length * Math.sin(angle);\r\n      if (newX >= padding && newX <= width-padding && newY >= padding && newY <= height-padding) {\r\n        points.push([{ x, y },{ x: newX, y: newY },{color:colors[depth-1]}]);\r\n        let nextLength = length *  0.77; // Decrease length for each branch\r\n        let leftAngle = angle - Math.PI / 6;\r\n        let rightAngle = angle + Math.PI / 6;\r\n        drawBranch(newX, newY, leftAngle, nextLength, depth - 1);\r\n        drawBranch(newX, newY, rightAngle, nextLength, depth - 1);\r\n      }\r\n    }\r\n    let startX = width / 2 ;\r\n    let startY = height - padding;\r\n    let initialLength = Math.min(width,height)*0.38;\r\n    points.push([{ x:startX, y:startY },{x:startX,y: startY-initialLength },{color:colors[maxDepth-1]}]);\r\n    drawBranch(points[0][1].x, points[0][1].y, -Math.PI *2/3, initialLength*0.36, maxDepth-1);\r\n    drawBranch(points[0][1].x, points[0][1].y, -Math.PI *1/3, initialLength*0.36, maxDepth-1);\r\n\r\n    return points;\r\n  }\r\n\r\n\r\n\r\n  function triInscribedCircle(width, height) {\r\n    let circles = [];\r\n    let x = width / 2;\r\n    let y = height / 2;\r\n    let radius = Math.min(width,height)/2 - 50;\r\n    let maxDepth = 4+Math.round(Math.random()*2);\r\n    let colors = generateColors(maxDepth)\r\n    function generateCircles(x, y, radius, depth) {\r\n      if (depth === 0) return;\r\n      circles.push({ x, y, r:radius, color:colors[depth-1]});\r\n      let newRadius = radius * 0.4645;\r\n      let newX1 = x - newRadius;\r\n      let newX2 = x +  newRadius;\r\n      let newY12 = y - newRadius/Math.sqrt(3);\r\n      let newY3 =  y + newRadius*2/Math.sqrt(3);\r\n      generateCircles(newX1, newY12, newRadius, depth - 1);\r\n      generateCircles(newX2, newY12, newRadius, depth - 1);\r\n      generateCircles(x, newY3, newRadius, depth - 1);\r\n    }\r\n    generateCircles(x, y, radius, maxDepth);\r\n    return circles;\r\n  }\r\n\r\n  self.addEventListener('message', e => { // eslint-disable-line no-restricted-globals\r\n      if (!e) return;\r\n\r\n      let {index,width,height} = e.data;\r\n\r\n      if(index === 1){\r\n        return postMessage(julia(width,height));\r\n      }else if (index === 2) {\r\n        return postMessage(sierpinski(width,height));\r\n      }else if (index === 3) {\r\n        return postMessage(barnsleyFern(width,height));\r\n      }else if (index === 4) {\r\n        return postMessage(kochSnowflake(width,height));\r\n      }else if (index === 5) {\r\n        return postMessage(treeFractal(width,height));\r\n      }else if (index === 6) {\r\n        return postMessage(triInscribedCircle(width,height));\r\n      }\r\n      postMessage([]);\r\n\r\n  })\r\n}\r\n","\r\nimport WebWorker from './WebWorker.js';\r\nimport worker from './worker.js';\r\n\r\n\r\n\r\nconst fractals = [\r\n  {\"index\": 1, \"name\": \"Julia Set\"},\r\n  {\"index\": 2, \"name\": \"Sierpinski Triangle\"},\r\n  {\"index\": 3, \"name\": \"Barnsley Fern\"},\r\n  {\"index\": 4, \"name\": \"Koch Snowflake\"},\r\n  {\"index\": 5, \"name\": \"Canopy Fractal\"},\r\n  {\"index\": 6, \"name\": \"Tri Inscribed Circle\"},\r\n]\r\n\r\nlet webWorker;\r\nconst terminateWorker = () =>{\r\n  if(webWorker){\r\n    webWorker.terminate();\r\n  }\r\n}\r\n\r\nconst triggerWorker = async(config) =>{\r\n  try {\r\n    terminateWorker()\r\n    // Create a new worker\r\n    webWorker = new WebWorker(worker);\r\n    webWorker.postMessage(config);\r\n\r\n    return await new Promise(resolve=>{\r\n      webWorker.onmessage = function(event) {\r\n        terminateWorker()\r\n        let data = event.data;\r\n        resolve(data);\r\n      };\r\n    })\r\n  } catch (e) {\r\n    terminateWorker();\r\n    return []\r\n  }\r\n}\r\n\r\nlet animationId;\r\nconst cancelAnimationFrame = () =>{\r\n  if(animationId){\r\n    let _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;\r\n    _cancelAnimationFrame(animationId);\r\n  }\r\n}\r\nconst requestAnimationFrame = (callback) =>{\r\n  let _requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\r\n  animationId = _requestAnimationFrame(callback);\r\n}\r\n\r\n\r\nconst getRandomColor = () => `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, \"0\")}`;\r\nconst getRandomBrightColor = () => `rgb(${Math.floor(Math.random() * 200) + 56},${Math.floor(Math.random() * 200) + 56},${Math.floor(Math.random() * 200) + 56})`;\r\n\r\nconst baseBackground = (ctx,width,height) =>{\r\n  // ctx.imageSmoothingEnabled = true;\r\n  // ctx.imageSmoothingQuality = \"high\";\r\n  ctx.clearRect(0,0,ctx.canvas.width,ctx.canvas.height);\r\n  ctx.fillStyle = \"#222227\";\r\n  ctx.fillRect(0,0,ctx.canvas.width,ctx.canvas.height);\r\n}\r\n\r\n\r\n// for Julia Set\r\nconst renderColors = (ctx,data,animated=false,width,height) =>{\r\n  if(!animated){\r\n    for (let i = 0; i < data.length; i++) {\r\n      let cx = i%width;\r\n      let cy = Math.floor(i/width);\r\n      ctx.fillStyle = data[i];\r\n      ctx.fillRect(cx, cy, 1, 1);\r\n    }\r\n  }else {\r\n    let line = 0;\r\n    function step() {\r\n      if(line === height) return;\r\n      for (let i = 0; i < width; i++) {\r\n        ctx.fillStyle = data[line*width+i];\r\n        ctx.fillRect(i, line, 1, 1);\r\n      }\r\n      line += 1;\r\n      requestAnimationFrame(step);\r\n    }\r\n    requestAnimationFrame(step);\r\n  }\r\n}\r\n\r\n// for Koch Snowflake\r\nconst renderLines = (ctx,data,isFill=false,animated=false) =>{\r\n\r\n  if(!isFill){\r\n    ctx.strokeStyle = getRandomBrightColor();\r\n    ctx.lineWidth = 1;\r\n  }else {\r\n    ctx.fillStyle = getRandomColor();\r\n  }\r\n\r\n  ctx.beginPath();\r\n\r\n  if(!animated){\r\n    ctx.moveTo(data[0].x, data[0].y);\r\n    data.slice(1).forEach(point => {\r\n      ctx.lineTo(point.x, point.y);\r\n    });\r\n    ctx.closePath();\r\n    !isFill?ctx.stroke():ctx.fill();\r\n  }else {\r\n    let i = 0;\r\n    let maxStep = 384;\r\n    let perRun = data.length/maxStep;\r\n    function step() {\r\n      if(i === maxStep){\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n        return;\r\n      }\r\n      for (let j = 0; j < perRun; j++) {\r\n        if(!i && !j){\r\n          ctx.moveTo(data[0].x, data[0].y);\r\n        }else {\r\n          ctx.lineTo(data[i*perRun+j].x, data[i*perRun+j].y);\r\n        }\r\n      }\r\n      ctx.stroke();\r\n      i+=1;\r\n      requestAnimationFrame(step);\r\n    }\r\n    requestAnimationFrame(step);\r\n  }\r\n}\r\n\r\n\r\n// for Canopy Fractal\r\nconst renderFragLines = (ctx,data,animated=false) =>{\r\n  ctx.strokeStyle = getRandomBrightColor();\r\n  ctx.lineWidth = 2;\r\n\r\n  if(!animated){\r\n    data.forEach(points => {\r\n      ctx.beginPath();\r\n      ctx.moveTo(points[0].x, points[0].y);\r\n      ctx.lineTo(points[1].x, points[1].y);\r\n      if(points.length >=3 && !!points[2].color){\r\n        ctx.strokeStyle = points[2].color;\r\n      }\r\n      ctx.stroke();\r\n      ctx.closePath();\r\n    });\r\n  }else {\r\n\r\n    function _drawPoint(points){\r\n      ctx.beginPath();\r\n      ctx.moveTo(points[0].x, points[0].y);\r\n      ctx.lineTo(points[1].x, points[1].y);\r\n      if(points.length >=3 && !!points[2].color){\r\n        ctx.strokeStyle = points[2].color;\r\n      }\r\n      ctx.stroke();\r\n      ctx.closePath();\r\n    }\r\n    _drawPoint(data[0]);\r\n    data = data.slice(1);\r\n\r\n    let i = 0;\r\n    let maxStep = 512;\r\n    let perRun = (data.length+2)/maxStep;\r\n    function step() {\r\n      if(i === maxStep)return;\r\n        for (let j = 0; j < perRun; j++) {\r\n          if(i*perRun+j < data.length){\r\n            _drawPoint(data[i*perRun+j]);\r\n          }\r\n        }\r\n        i+=1;\r\n      requestAnimationFrame(step);\r\n    }\r\n    requestAnimationFrame(step);\r\n  }\r\n}\r\n\r\n// for Sierpinski Triangle\r\nconst renderTriangles = (ctx,data,isFill=false,animated=false) =>{\r\n  let isMultiColor = !!data[0][3]?.color??false;\r\n  if(!isFill || !isMultiColor){\r\n    ctx.strokeStyle = getRandomBrightColor();\r\n    ctx.lineWidth = 2;\r\n  }else {\r\n    ctx.fillStyle = getRandomColor();\r\n  }\r\n  if(!animated){\r\n    data.forEach((points, i) => {\r\n      ctx.beginPath();\r\n      ctx.moveTo(points[0].x, points[0].y);\r\n      ctx.lineTo(points[1].x, points[1].y);\r\n      ctx.lineTo(points[2].x, points[2].y);\r\n      ctx.closePath();\r\n      if(!!isMultiColor){\r\n        !isFill?(ctx.strokeStyle=points[3].color):(ctx.fillStyle = points[3].color);\r\n      }\r\n      !isFill?ctx.stroke():ctx.fill();\r\n    });\r\n  }else {\r\n    let i = 0;\r\n    function step() {\r\n      if(i === data.length) return;\r\n        let points = data[i]\r\n        ctx.beginPath();\r\n        ctx.moveTo(points[0].x, points[0].y);\r\n        ctx.lineTo(points[1].x, points[1].y);\r\n        ctx.lineTo(points[2].x, points[2].y);\r\n        ctx.closePath();\r\n        if(!!isMultiColor){\r\n          !isFill?(ctx.strokeStyle=points[3].color):(ctx.fillStyle = points[3].color);\r\n        }\r\n        !isFill?ctx.stroke():ctx.fill();\r\n        i+=1;\r\n      requestAnimationFrame(step);\r\n    }\r\n    requestAnimationFrame(step);\r\n  }\r\n}\r\n\r\n// for Barnsley Fern\r\nconst renderRectangles = (ctx,data,animated=false) =>{\r\n  ctx.fillStyle = getRandomBrightColor(); // Set color to dark green\r\n  if(!animated){\r\n    data.forEach((point, i) => {\r\n      ctx.fillRect(point.x, point.y, 1, 1); // Draw each point\r\n    });\r\n  }else {\r\n    let drawPerIteration  = 400;\r\n    let lines = data.length/drawPerIteration;\r\n    let iteration = 0;\r\n    function step() {\r\n      if(lines === iteration) return;\r\n      for (let i = 0; i < drawPerIteration; i++) {\r\n        let point = data[iteration*drawPerIteration+i]\r\n        ctx.fillRect(point.x, point.y, 1, 1);\r\n      }\r\n      iteration += 1;\r\n      requestAnimationFrame(step);\r\n    }\r\n    requestAnimationFrame(step);\r\n  }\r\n}\r\n\r\n// for Tri Inscribed Circle\r\nconst renderCircles = (ctx,data,animated=false) =>{\r\n  ctx.strokeStyle=getRandomBrightColor();\r\n  ctx.lineWidth = 2;\r\n\r\n  if(!animated){\r\n    data.forEach(circle => {\r\n        ctx.beginPath();\r\n        if(!!circle.color){\r\n          ctx.strokeStyle=circle.color;\r\n        }\r\n        ctx.arc(circle.x, circle.y, circle.r, 0, Math.PI * 2);\r\n        ctx.stroke();\r\n    });\r\n  }else {\r\n    let i = 0;\r\n    function step() {\r\n      if(i === data.length) return;\r\n        let points = data[i]\r\n        ctx.beginPath();\r\n        if(!!points.color){\r\n          ctx.strokeStyle=points.color;\r\n        }\r\n        ctx.arc(points.x, points.y, points.r, 0, Math.PI * 2);\r\n        ctx.stroke();\r\n        i+=1;\r\n      requestAnimationFrame(step);\r\n    }\r\n    requestAnimationFrame(step);\r\n  }\r\n}\r\n\r\nconst drawFract = async(canvas,index) =>{\r\n  try {\r\n    cancelAnimationFrame();\r\n    let width = canvas.width;\r\n    let height = canvas.height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    baseBackground(ctx,width,height);\r\n\r\n    let data = await triggerWorker({index,width,height});\r\n    // console.log(data);\r\n    if(!data || !data.length) return;\r\n\r\n    let isAnimate = true;\r\n    if(index === 1){\r\n      renderColors(ctx,data,isAnimate,width,height);\r\n    }else if (index === 2) {\r\n      let isFill = Math.random()>=0.5;\r\n      renderTriangles(ctx,data,isFill,isAnimate);\r\n    }else if (index === 3) {\r\n      renderRectangles(ctx,data,isAnimate);\r\n    }else if (index === 4) {\r\n      let isFill = Math.random()>=0.5 && !isAnimate;\r\n      renderLines(ctx,data,isFill,isAnimate);\r\n    }else if (index === 5) {\r\n      renderFragLines(ctx,data,isAnimate);\r\n    }else if (index === 6) {\r\n      renderCircles(ctx,data,isAnimate);\r\n    }\r\n\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n}\r\n\r\nlet workerMethod = {\r\n  drawFract,\r\n  terminateWorker\r\n}\r\nexport default workerMethod;\r\n","import React, { Component} from 'react'\r\nimport WorkerMethod from \"./helper\"\r\nimport '../../scss/main.scss'\r\n\r\nclass FractalDrawing extends Component  {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n    }\r\n    this.canvasRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.title = \"Fractals || canvas\";\r\n    let canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\")\r\n    canvas.width = 1080;\r\n    canvas.height = 1080;\r\n    ctx.fillStyle = \"#222227\";\r\n    ctx.fillRect(0,0,ctx.canvas.width,ctx.canvas.height);\r\n    this.drawFractal(2)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.title = \"Canvas Generative\";\r\n    WorkerMethod.terminateWorker()\r\n  }\r\n\r\n\r\n  drawFractal =(index=1) =>{\r\n    let{width,height} = this.state;\r\n    let canvas = this.canvasRef.current;\r\n    WorkerMethod.drawFract(canvas,index);\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"section__model main__margin\">\r\n        <div className=\"main__panel\">\r\n          <div className=\"canvas__panel\">\r\n            <canvas ref={this.canvasRef}/>\r\n          </div>\r\n          <div className=\"canvas__btns\">\r\n            <button onClick={()=>this.drawFractal(1)}>1</button>\r\n            <button onClick={()=>this.drawFractal(2)}>2</button>\r\n            <button onClick={()=>this.drawFractal(3)}>3</button>\r\n            <button onClick={()=>this.drawFractal(4)}>4</button>\r\n            <button onClick={()=>this.drawFractal(5)}>5</button>\r\n            <button onClick={()=>this.drawFractal(6)}>6</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default FractalDrawing;\r\n"],"names":["WebWorker","constructor","worker","code","toString","blob","Blob","Worker","URL","createObjectURL","generateColors","length","colors","hueIncrement","baseHue","Math","random","toHex","x","round","padStart","hslToRgb","h","s","l","r","g","b","hue2rgb","p","q","t","concat","i","color","push","self","addEventListener","e","index","width","height","data","postMessage","julia","baseH","baseS","baseL","drawJulia","cx","cy","y","iteration","xtemp","Array","j","sierpinski","triangles","maxDepth","generateTriangle","x1","y1","x2","y2","x3","y3","depth","mid1x","mid1y","mid2x","mid2y","mid3x","mid3y","points","newX","newY","canvasX","floor","canvasY","barnsleyFern","kochLine","deltaX","deltaY","x4","sqrt","y4","x5","y5","centerX","centerY","size","min","kochSnowflake","drawBranch","angle","cos","sin","nextLength","leftAngle","PI","rightAngle","startX","startY","initialLength","treeFractal","circles","radius","generateCircles","newRadius","newX1","newX2","newY12","newY3","triInscribedCircle","webWorker","terminateWorker","terminate","animationId","requestAnimationFrame","callback","_requestAnimationFrame","window","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame","getRandomColor","getRandomBrightColor","drawFract","async","canvas","cancelAnimationFrame","mozCancelAnimationFrame","ctx","getContext","baseBackground","clearRect","fillStyle","fillRect","config","Promise","resolve","onmessage","event","triggerWorker","isAnimate","arguments","undefined","line","step","renderColors","_data$0$3$color","_data$0$","isFill","animated","isMultiColor","strokeStyle","lineWidth","beginPath","moveTo","lineTo","closePath","fill","stroke","forEach","renderTriangles","drawPerIteration","lines","point","renderRectangles","maxStep","perRun","slice","renderLines","_drawPoint","renderFragLines","arc","circle","renderCircles","console","log","FractalDrawing","Component","props","_this","super","this","drawFractal","state","canvasRef","current","WorkerMethod","React","componentDidMount","document","title","componentWillUnmount","render","_jsx","className","children","_jsxs","ref","onClick"],"sourceRoot":""}