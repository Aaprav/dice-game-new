{"version":3,"file":"static/js/289.4efdcbac.chunk.js","mappings":"oKAMA,MAAMA,UAAuBC,EAAAA,UAE3BC,WAAAA,CAAYC,GACVC,MAAMD,GAAM,KA6BdE,UAAY,KACV,IAAIC,EAASC,KAAKC,UAAUC,QAC5B,MAAMC,EAAMJ,EAAOK,WAAW,MAC9BD,EAAIE,YAGI,MAAMC,EAASC,KAAKC,SAAWT,EAAOU,MAChCC,EAASH,KAAKC,SAAWT,EAAOY,OACtCR,EAAIS,OAAON,EAAQI,GAEnB,MAAMG,EAAYN,KAAKO,MAAsB,EAAhBP,KAAKC,UAAgB,EAElD,IAAIO,EAAW,EACXC,EAAW,EAEf,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAWI,IAAK,CAClCd,EAAIE,YAGJ,MAAMC,EAAsB,IAAbS,EAAiBA,EAAWR,KAAKC,SAAWT,EAAOU,MAC5DC,EAAsB,IAAbM,EAAiBA,EAAWT,KAAKC,SAAWT,EAAOY,OAG5DO,EAAYZ,GAAUC,KAAKC,SAAW,IAAOT,EAAOU,MAAQ,EAC5DU,EAAYT,GAAUH,KAAKC,SAAW,IAAOT,EAAOY,OAAS,EAC7DS,EAAYd,GAAUC,KAAKC,SAAW,IAAOT,EAAOU,MAAQ,EAC5DY,EAAYX,GAAUH,KAAKC,SAAW,IAAOT,EAAOY,OAAS,EAG7DW,EAAOf,KAAKC,SAAWT,EAAOU,MAC9Bc,EAAOhB,KAAKC,SAAWT,EAAOY,OAGpCR,EAAIS,OAAON,EAAQI,GACnBP,EAAIqB,cAAcN,EAAWC,EAAWC,EAAWC,EAAWC,EAAMC,GAGpEpB,EAAIsB,YAAc,KAAOlB,KAAKC,SAASkB,SAAS,IAAM,UAAUC,MAAM,EAAG,GACzExB,EAAIyB,UAAY,EAChBzB,EAAI0B,SACJ1B,EAAI2B,YAGJf,EAAWO,EACXN,EAAWO,CACb,GAYT,KACDQ,WAAa,KACX,IAAG,EAACC,EAAC,EAACC,EAAC,EAACC,EAAC,GAACC,EAAE,GAACC,EAAE,MAACC,GAASrC,KAAKsC,MAC1BvC,EAASC,KAAKC,UAAUC,QAC5B,MAAMC,EAAMJ,EAAOK,WAAW,MAG9BD,EAAIoC,UAAY,YAChBpC,EAAIqC,SAAS,EAAE,EAAEzC,EAAOU,MAAMV,EAAOY,QAErCR,EAAIE,YACJF,EAAIsC,IAAIT,EAAGC,EAAGC,EAAG,EAAa,EAAV3B,KAAKmC,IACzBvC,EAAIsB,YAAcY,EAClBlC,EAAI0B,SACJ1B,EAAI2B,WAAW,EAnGf9B,KAAKsC,MAAQ,CACXN,EAAE,IACFC,EAAE,IACFE,GAAG,EACHC,GAAG,EACHF,EAAE,IACFG,MAZiB,IAAAM,OAAUpC,KAAKO,MAAsB,SAAhBP,KAAKC,UAAqBkB,SAAS,IAAIkB,SAAS,EAAG,OAc3F5C,KAAKC,UAAY4C,EAAAA,YACjB7C,KAAK8C,UAAY,EACnB,CAEAC,iBAAAA,GACEC,SAASC,MAAQ,mBACjB,IAAIlD,EAASC,KAAKC,UAAUC,QAC5BH,EAAOU,MAAQ,KACfV,EAAOY,OAAS,KAEhBX,KAAKF,WAIP,CAEAoD,oBAAAA,GACEF,SAASC,MAAQ,oBACjBE,OAAOC,qBAAqBpD,KAAK8C,UACnC,CA0FAO,MAAAA,GACE,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8BAA6BC,UAC1CC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BF,EAAAA,EAAAA,KAAA,UAAQI,IAAK1D,KAAKC,eAEpBqD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,KAAA,UAAQK,QAASA,OAAOH,SAAC,YAKnC,EAMF,S","sources":["pages/motions/index.jsx"],"sourcesContent":["import React, { Component} from 'react'\r\n// import WorkerMethod from \"./helper\"\r\nimport '../../scss/main.scss'\r\n\r\nconst getRandomColor = () => `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, \"0\")}`;\r\n\r\nclass FractalDrawing extends Component  {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      x:200,\r\n      y:200,\r\n      dx:5,\r\n      dy:3,\r\n      r:100,\r\n      color:getRandomColor(),\r\n    }\r\n    this.canvasRef = React.createRef();\r\n    this.requestId = \"\";\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.title = \"Motion || canvas\";\r\n    let canvas = this.canvasRef.current;\r\n    canvas.width = 1080;\r\n    canvas.height = 1080;\r\n\r\n    this.randomArc()\r\n\r\n\r\n\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.title = \"Canvas Generative\";\r\n    window.cancelAnimationFrame(this.requestId);\r\n  }\r\n  randomArc = () =>{\r\n    let canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.beginPath();\r\n\r\n            // Set the starting point\r\n            const startX = Math.random() * canvas.width;\r\n            const startY = Math.random() * canvas.height;\r\n            ctx.moveTo(startX, startY);\r\n\r\n            const numCurves = Math.floor(Math.random() * 6) + 1; // Random number of curves (1 to 6)\r\n\r\n            let prevEndX = 0;\r\n            let prevEndY = 0;\r\n\r\n            for (let i = 0; i < numCurves; i++) {\r\n              ctx.beginPath();\r\n\r\n              // Set the starting point\r\n              const startX = prevEndX !== 0 ? prevEndX : Math.random() * canvas.width;\r\n              const startY = prevEndY !== 0 ? prevEndY : Math.random() * canvas.height;\r\n\r\n              // Generate random control points\r\n              const controlX1 = startX + (Math.random() - 0.5) * canvas.width / 2;\r\n              const controlY1 = startY + (Math.random() - 0.5) * canvas.height / 2;\r\n              const controlX2 = startX + (Math.random() - 0.5) * canvas.width / 2;\r\n              const controlY2 = startY + (Math.random() - 0.5) * canvas.height / 2;\r\n\r\n              // Generate random end point\r\n              const endX = Math.random() * canvas.width;\r\n              const endY = Math.random() * canvas.height;\r\n\r\n              // Draw the curve\r\n              ctx.moveTo(startX, startY);\r\n              ctx.bezierCurveTo(controlX1, controlY1, controlX2, controlY2, endX, endY);\r\n\r\n              // Set a random stroke color\r\n              ctx.strokeStyle = '#' + (Math.random().toString(16) + '000000').slice(2, 8);\r\n              ctx.lineWidth = 2;\r\n              ctx.stroke();\r\n              ctx.closePath();\r\n\r\n              // Update previous end point\r\n              prevEndX = endX;\r\n              prevEndY = endY;\r\n            }\r\n\r\n            // const grd = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n            // grd.addColorStop(0, \"red\");\r\n            // grd.addColorStop(1, \"white\");\r\n            //\r\n            // // Set a random stroke color\r\n            // ctx.strokeStyle = grd;\r\n            // ctx.lineWidth = 25;\r\n            // ctx.stroke();\r\n            // ctx.closePath();\r\n\r\n  }\r\n  drawCircle = () =>{\r\n    let{x,y,r,dx,dy,color} = this.state;\r\n    let canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    // ctx.clearRect(0,0,canvas.width,canvas.height);\r\n\r\n    ctx.fillStyle = \"#22222744\";\r\n    ctx.fillRect(0,0,canvas.width,canvas.height);\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, r, 0, Math.PI * 2);\r\n    ctx.strokeStyle = color;\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n\r\n\r\n    // if(x+r >= canvas.width || x <= r){\r\n    //   dx=-dx*1;\r\n    //   color=getRandomColor();\r\n    // }\r\n    // if(y+r >= canvas.height || y <= r){\r\n    //   dy=-dy*1;\r\n    //   color=getRandomColor();\r\n    // }\r\n    // this.setState({x:x+dx,dx,y:y+dy,dy,color})\r\n    //\r\n    // this.requestId = window.requestAnimationFrame(this.drawCircle)\r\n\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"section__model main__margin\">\r\n        <div className=\"main__panel\">\r\n          <div className=\"canvas__panel\">\r\n            <canvas ref={this.canvasRef}/>\r\n          </div>\r\n          <div className=\"canvas__btns\">\r\n            <button onClick={()=>{}}>1</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default FractalDrawing;\r\n"],"names":["FractalDrawing","Component","constructor","props","super","randomArc","canvas","this","canvasRef","current","ctx","getContext","beginPath","startX","Math","random","width","startY","height","moveTo","numCurves","floor","prevEndX","prevEndY","i","controlX1","controlY1","controlX2","controlY2","endX","endY","bezierCurveTo","strokeStyle","toString","slice","lineWidth","stroke","closePath","drawCircle","x","y","r","dx","dy","color","state","fillStyle","fillRect","arc","PI","concat","padStart","React","requestId","componentDidMount","document","title","componentWillUnmount","window","cancelAnimationFrame","render","_jsx","className","children","_jsxs","ref","onClick"],"sourceRoot":""}