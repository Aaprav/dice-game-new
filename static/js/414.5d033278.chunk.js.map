{"version":3,"file":"static/js/414.5d033278.chunk.js","mappings":"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","sources":["pages/webgl3d/components/platforms/circular/groove-strip.jsx","pages/webgl3d/components/platforms/circular/groove-strip2.jsx","pages/webgl3d/components/platforms/circular/groove-strip3.jsx","pages/webgl3d/components/platforms/circular/outward-strip.jsx","pages/webgl3d/components/environment/index.jsx","pages/webgl3d/components/three-setup/index.jsx","pages/webgl3d/components/objects3d/spaceship-packet/index.jsx","pages/webgl3d/components/objects3d/spaceship-packet/models.js","pages/webgl3d/helpers/textures.js","pages/webgl3d/helpers/material.js","pages/webgl3d/helpers/geometry/geometry1.js","pages/webgl3d/helpers/geometry/geometry2.js","pages/webgl3d/helpers/geometry/index.jsx"],"sourcesContent":["import * as THREE from 'three';\r\nimport {Material,Geometry} from '../../../helpers';\r\n\r\n\r\n\r\nconst renderStep = (settings,materials)=>{\r\n  let {radius,position,height,stepSize,stripColor,options,padLeft,stripWidth,stripDepth} = settings;\r\n  let{cylinderMaterial,stripShadowMaterial} = materials;\r\n  let pivot = new THREE.Group();\r\n\r\n  let lightMaterial = new THREE.MeshPhysicalMaterial({\r\n    toneMapped: false,\r\n    color: 0x000000,\r\n    emissive : stripColor,\r\n    emissiveIntensity :1.2,\r\n  });\r\n\r\n\r\n  let outerCylinder = new THREE.Mesh(Geometry.hollowCylinder(radius,padLeft,height), cylinderMaterial);\r\n  outerCylinder.rotation.x = -Math.PI/2;\r\n  outerCylinder.position.set(0, position, 0);\r\n  pivot.add(outerCylinder);\r\n\r\n  let stripLight = new THREE.Mesh(new THREE.RingGeometry( radius-padLeft-stripWidth,radius-padLeft,64), lightMaterial);\r\n  stripLight.rotation.x = -Math.PI/2;\r\n  stripLight.position.set(0, position-stripDepth+height/2, 0);\r\n  stripLight.layers.enable(1)\r\n  pivot.add(stripLight);\r\n\r\n  let outerInnerCylinder = new THREE.Mesh(new THREE.CylinderGeometry(radius-padLeft-0.01,radius-padLeft-0.01,stripDepth,64,1,true), stripShadowMaterial);\r\n  outerInnerCylinder.position.set(0, position+(height-stripDepth)/2, 0);\r\n  pivot.add(outerInnerCylinder);\r\n\r\n  let innerCylinder = new THREE.Mesh(new THREE.CylinderGeometry(radius-padLeft-stripWidth,radius-padLeft-stripWidth,stripDepth,64), cylinderMaterial);\r\n  innerCylinder.position.set(0, position-(stripDepth-height)/2, 0);\r\n  pivot.add(innerCylinder);\r\n\r\n  outerCylinder.castShadow = true;\r\n  outerCylinder.receiveShadow = true;\r\n  innerCylinder.castShadow = true;\r\n  innerCylinder.receiveShadow = true;\r\n\r\n  if(!!settings.backFill){\r\n    let backCover = new THREE.Mesh(new THREE.RingGeometry(0,radius,64),cylinderMaterial);\r\n    backCover.rotation.x = Math.PI/2;\r\n    backCover.position.set(0, position-height/2, 0);\r\n    pivot.add(backCover);\r\n  }\r\n\r\n  return pivot;\r\n}\r\n\r\nconst grooveStrip = (options) =>{\r\n  let animated = options?.animated??true;\r\n  let lightOn = options?.lightOn??false;\r\n  let pivot = new THREE.Group();\r\n  let colors = {\r\n    base : new THREE.Color(options?.colors?.base??0x355C5F),\r\n    top: new THREE.Color(options?.colors?.top??0xED6065),\r\n    middle: new THREE.Color(options?.colors?.middle??0x92DCA8),\r\n    bottom: new THREE.Color(options?.colors?.bottom??0xFDDD7D),\r\n    strip: new THREE.Color(options?.colors?.strip??0x101010),\r\n  }\r\n  let settings = {\r\n    radius : options?.radius??15,\r\n    position : options?.position??-14,\r\n    height : options?.height??2,\r\n    stepSize : options?.stepSize??3,\r\n    stripColor:colors.strip,\r\n    padLeft : 0.8,\r\n    stripWidth : 1.2,\r\n    stripDepth : 0.5\r\n  }\r\n\r\n  let cylinderMaterial = new THREE.MeshPhysicalMaterial({\r\n    color: colors.base,\r\n    metalness: 0.0,\r\n    roughness: 0.0,\r\n    clearcoat: 1.0,\r\n    clearcoatRoughness: 0.0,\r\n    reflectivity: 1,\r\n    // toneMapped: false\r\n  });\r\n  let stripShadowMaterial = cylinderMaterial.clone();\r\n  stripShadowMaterial.side = THREE.BackSide;\r\n\r\n  pivot.add(renderStep(settings,{cylinderMaterial,stripShadowMaterial}));\r\n\r\n  settings.radius += settings.stepSize;\r\n  settings.position -= settings.height;\r\n  pivot.add(renderStep(settings,{cylinderMaterial,stripShadowMaterial}));\r\n\r\n  settings.radius += settings.stepSize;\r\n  settings.position -= settings.height;\r\n  settings.backFill = true;\r\n  pivot.add(renderStep(settings,{cylinderMaterial,stripShadowMaterial}));\r\n\r\n  // strip light animations\r\n\r\n  function turnOnLight(lcolor,index){\r\n    pivot.children[index].children[1].material.emissive = lcolor;\r\n    let stripShadowMaterial = Material.linearGradient(colors.base,lcolor,1);\r\n    stripShadowMaterial.side = THREE.BackSide;\r\n    setTimeout(()=>{\r\n      pivot.children[index].children[3].material = [Material.linearGradient(colors.base,lcolor,1),cylinderMaterial];\r\n      pivot.children[index].children[2].material = stripShadowMaterial;\r\n    },20)\r\n  }\r\n  function turnOnShadow(sColor,index){\r\n    setTimeout(()=>{\r\n      pivot.children[index].children[0].material = [cylinderMaterial,Material.linearGradient(sColor,colors.base,3)];\r\n    },20)\r\n  }\r\n\r\n  function animationOn(){\r\n    setTimeout(()=>{\r\n      turnOnLight(colors.bottom,2);\r\n      turnOnShadow(colors.bottom,1);\r\n        setTimeout(()=>{\r\n          turnOnLight(colors.middle,1);\r\n          turnOnShadow(colors.middle,0);\r\n            setTimeout(()=>{\r\n              turnOnLight(colors.top,0);\r\n              if(!!animated){\r\n                animationOff()\r\n              }\r\n            }, 1000);\r\n        }, 1000);\r\n    }, 1000);\r\n  }\r\n\r\n  function animationOff(){\r\n    setTimeout(()=>{\r\n      pivot.children.forEach((item, i) => {\r\n        item.children.forEach((mesh, j) => {\r\n          if(j === 1){\r\n            pivot.children[i].children[j].material.emissive = colors.strip;\r\n          }else if (j === 2) {\r\n            pivot.children[i].children[j].material = stripShadowMaterial;\r\n          }else {\r\n            pivot.children[i].children[j].material = cylinderMaterial;\r\n          }\r\n        });\r\n      });\r\n      if(!!animated){\r\n        animationOn()\r\n      }\r\n    },1000)\r\n  }\r\n\r\n  if(!!lightOn){\r\n    turnOnLight(colors.bottom,2);\r\n    turnOnShadow(colors.bottom,1);\r\n    turnOnLight(colors.middle,1);\r\n    turnOnShadow(colors.middle,0);\r\n    turnOnLight(colors.top,0);\r\n    if(!!animated){\r\n      animationOff()\r\n    }\r\n\r\n  }else if(!!animated) {\r\n    animationOn()\r\n  }\r\n\r\n\r\n  return pivot;\r\n}\r\n\r\nexport default grooveStrip;\r\n","import * as THREE from 'three';\r\nimport {Material,Geometry,Textures} from '../../../helpers';\r\n\r\n\r\nclass GrooveStrip2 {\r\n\r\n  constructor(options){\r\n\r\n    this.animated = false;\r\n    this.pivot = new THREE.Group();\r\n    this.colors = {\r\n      base : new THREE.Color(options?.colors?.base??0x355C5F),\r\n      top: new THREE.Color(options?.colors?.top??0xED6065),\r\n      middle: new THREE.Color(options?.colors?.middle??0x92DCA8),\r\n      bottom: new THREE.Color(options?.colors?.bottom??0xFDDD7D),\r\n      strip: new THREE.Color(options?.colors?.strip??0x101010),\r\n    }\r\n\r\n    this.settings = {\r\n      radius : options?.radius??15,\r\n      position : options?.position??-14,\r\n      height : options?.height??2,\r\n      stepSize : options?.stepSize??3,\r\n      padLeft : 0.8,\r\n      stripWidth : 1.2,\r\n      stripDepth : 0.5,\r\n      corners: options?.corners??64,\r\n    }\r\n    this.materials = [];\r\n    this.textures = [];\r\n    this.timeout = \"\";\r\n  }\r\n  renderStep = ()=>{\r\n    let {radius,position,height,stepSize,stripColor,options,padLeft,stripWidth,stripDepth,corners} = this.settings;\r\n    let pivot = new THREE.Group();\r\n\r\n    let outerCylinder = new THREE.Mesh(Geometry.hollowCylinder(radius,padLeft,height,corners/2), [this.materials[0],this.materials[2].clone(),this.materials[0]]);\r\n    outerCylinder.rotation.x = -Math.PI/2;\r\n    outerCylinder.position.set(0, position, 0);\r\n    pivot.add(outerCylinder);\r\n\r\n    let stripLight = new THREE.Mesh(new THREE.RingGeometry( radius-padLeft-stripWidth,radius-padLeft,corners), this.materials[1].clone());\r\n    stripLight.rotation.x = -Math.PI/2;\r\n    stripLight.position.set(0, position-stripDepth+height/2, 0);\r\n    stripLight.layers.enable(1)\r\n    pivot.add(stripLight);\r\n\r\n    let outerInnerCylinder = new THREE.Mesh(new THREE.CylinderGeometry(radius-padLeft-0.01,radius-padLeft-0.01,stripDepth,corners,1,true), this.materials[3].clone());\r\n    outerInnerCylinder.position.set(0, position+(height-stripDepth)/2, 0);\r\n    pivot.add(outerInnerCylinder);\r\n\r\n    // let innerCylinder = new THREE.Mesh(new THREE.CylinderGeometry(radius-padLeft-stripWidth,radius-padLeft-stripWidth,stripDepth,64), this.materials[0]);\r\n    let innerCylinder = new THREE.Mesh(new THREE.CylinderGeometry(radius-padLeft-stripWidth,radius-padLeft-stripWidth,stripDepth,corners), [this.materials[2].clone(),this.materials[0],this.materials[0]]);\r\n\r\n    innerCylinder.position.set(0, position-(stripDepth-height)/2, 0);\r\n    pivot.add(innerCylinder);\r\n\r\n    outerCylinder.castShadow = true;\r\n    outerCylinder.receiveShadow = true;\r\n    innerCylinder.castShadow = true;\r\n    innerCylinder.receiveShadow = true;\r\n\r\n    if(!!this.settings.backFill){\r\n      let backCover = new THREE.Mesh(new THREE.RingGeometry(0,radius,corners),this.materials[0]);\r\n      backCover.rotation.x = Math.PI/2;\r\n      backCover.position.set(0, position-height/2, 0);\r\n      pivot.add(backCover);\r\n    }\r\n\r\n    if(corners === 6){\r\n      outerCylinder.rotation.z = Math.PI/6;\r\n      stripLight.rotation.z = Math.PI/6;\r\n    }\r\n    // console.log(pivot);\r\n    this.pivot.add(pivot);\r\n  }\r\n\r\n  loadMaterials = () =>{\r\n\r\n    this.textures.push(Textures.gradientColor(this.colors.base,this.colors.base,0));\r\n    this.textures.push(Textures.gradientColor(this.colors.top,this.colors.base,0));\r\n    this.textures.push(Textures.gradientColor(this.colors.middle,this.colors.base,0));\r\n    this.textures.push(Textures.gradientColor(this.colors.bottom,this.colors.base,0));\r\n    this.textures.push(Textures.gradientColor(this.colors.base,this.colors.middle,0));\r\n    this.textures.push(Textures.gradientColor(this.colors.base,this.colors.bottom,0));\r\n\r\n    let cylinderMaterial = new THREE.MeshPhongMaterial({\r\n      color: this.colors.base,\r\n      metalness: 0.0,\r\n      roughness: 0.0,\r\n      clearcoat: 1.0,\r\n      clearcoatRoughness: 0.0,\r\n      reflectivity: 1,\r\n      // toneMapped: false\r\n      shininess: 30,\r\n      specular: this.colors.base,\r\n\r\n    });\r\n    this.materials.push(cylinderMaterial); // 0\r\n\r\n    let lightMaterial = new THREE.MeshPhysicalMaterial({\r\n      toneMapped: false,\r\n      color: 0x000000,\r\n      emissive : this.colors.strip,\r\n      emissiveIntensity :1.2,\r\n      shininess: 300,\r\n    });\r\n\r\n    this.materials.push(lightMaterial); // 1\r\n\r\n    let gradientMaterial = cylinderMaterial.clone();\r\n    gradientMaterial.color.set(0xffffff);\r\n    gradientMaterial.map = this.textures[0];\r\n    this.materials.push(gradientMaterial); // 2\r\n\r\n\r\n    let gradientMaterial2 = gradientMaterial.clone();\r\n    gradientMaterial2.side = THREE.BackSide;\r\n    this.materials.push(gradientMaterial2); // 3\r\n  }\r\n\r\n  renderBase = () =>{\r\n    this.renderStep()\r\n\r\n    this.settings.radius += this.settings.stepSize;\r\n    this.settings.position -= this.settings.height;\r\n    this.renderStep()\r\n\r\n    this.settings.radius += this.settings.stepSize;\r\n    this.settings.position -= this.settings.height;\r\n    this.settings.backFill = true;\r\n    this.renderStep();\r\n  }\r\n\r\n  // strip light animations\r\n  turnOnLight(lcolor,index){\r\n    this.pivot.children[index].children[1].material.emissive.set(lcolor);\r\n    this.pivot.children[index].children[2].material.map = this.textures[index+1];\r\n    this.pivot.children[index].children[3].material[0].map = this.textures[index+1];\r\n\r\n    // this.pivot.children[index].children[2].material.uniforms.color2.value = lcolor;\r\n  }\r\n  turnOnShadow(sColor,index){\r\n    this.pivot.children[index].children[0].material[1].map = this.textures[index+4];\r\n  }\r\n\r\n  animationOn = () =>{\r\n    this.timeout = setTimeout(()=>{\r\n      this.turnOnLight(this.colors.bottom,2);\r\n      this.turnOnShadow(this.colors.bottom,1);\r\n        this.timeout = setTimeout(()=>{\r\n          this.turnOnLight(this.colors.middle,1);\r\n          this.turnOnShadow(this.colors.middle,0);\r\n            this.timeout = setTimeout(()=>{\r\n              this.turnOnLight(this.colors.top,0);\r\n              if(!!this.animated){\r\n                this.timeout = setTimeout(()=>{\r\n                  this.animationOff()\r\n                  this.timeout = setTimeout(()=>{\r\n                    this.animationOn()\r\n                  },1000)\r\n                },1000)\r\n              }\r\n            }, 1000);\r\n        }, 1000);\r\n    }, 1000);\r\n  }\r\n\r\n  animationOff = () =>{\r\n    this.pivot.children.forEach((item, i) => {\r\n      item.children.forEach((mesh, j) => {\r\n        if (j === 0) {\r\n          mesh.material[1].map = this.textures[0];\r\n        }else if(j === 1){\r\n          mesh.material.emissive.set(this.colors.strip);\r\n        }else if (j === 2) {\r\n          mesh.material.map = this.textures[0];\r\n        }else if (j === 3) {\r\n          mesh.material[0].map = this.textures[0];\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n\r\n  setup = (isLight=false,isAnimated=true) =>{\r\n    if(!!this.materials.length) return;\r\n\r\n    this.loadMaterials();\r\n    this.renderBase();\r\n\r\n    if(!!isLight){\r\n      this.turnOnLight(this.colors.bottom,2);\r\n      this.turnOnShadow(this.colors.bottom,1);\r\n      this.turnOnLight(this.colors.middle,1);\r\n      this.turnOnShadow(this.colors.middle,0);\r\n      this.turnOnLight(this.colors.top,0);\r\n      if(!!isAnimated){\r\n        this.animated = true;\r\n        this.timeout = setTimeout(()=>{\r\n          this.animationOff()\r\n          this.timeout = setTimeout(()=>{\r\n            this.animationOn()\r\n          },1000)\r\n        },1000)\r\n      }\r\n    }else if(!!isAnimated) {\r\n      this.animated = true;\r\n      this.timeout = setTimeout(()=>{\r\n        this.animationOn()\r\n      },1000)\r\n    }\r\n    return this.pivot;\r\n  }\r\n\r\n  start = () =>{\r\n    if(this.animated){\r\n      this.stop();\r\n      this.animationOn();\r\n    }else {\r\n      this.animated = true;\r\n      this.animationOn()\r\n    }\r\n  }\r\n\r\n  stop = () =>{\r\n    if(this.animated){\r\n      this.animated = false;\r\n      clearTimeout(this.timeout);\r\n      this.animationOff();\r\n    }\r\n  }\r\n\r\n  dispose = () =>{\r\n    this.stop();\r\n    // Recursively traverse the pivot and dispose of its children\r\n     this.pivot.traverse((child) => {\r\n         if (child.geometry) {\r\n             child.geometry.dispose();\r\n         }\r\n         if (child.material) {\r\n             if (Array.isArray(child.material)) {\r\n                 // Dispose of each material if it's an array\r\n                 child.material.forEach((mat) => mat.dispose());\r\n             } else {\r\n                 child.material.dispose();\r\n             }\r\n         }\r\n         if (child.texture) {\r\n             child.texture.dispose();\r\n         }\r\n     });\r\n\r\n     // Remove the pivot from its parent\r\n     if (this.pivot.parent) {\r\n         this.pivot.parent.remove(this.pivot);\r\n     }\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default GrooveStrip2;\r\n","import * as THREE from 'three';\r\nimport {Material,Geometry,Textures} from '../../../helpers';\r\n\r\n\r\nclass GrooveStrip3 {\r\n\r\n  constructor(options){\r\n\r\n    this.animated = false;\r\n    this.pivot = new THREE.Group();\r\n    this.colors = {\r\n      base : new THREE.Color(options?.colors?.base??0x355C5F),\r\n      top: new THREE.Color(options?.colors?.top??0xED6065),\r\n      middle: new THREE.Color(options?.colors?.middle??0x92DCA8),\r\n      bottom: new THREE.Color(options?.colors?.bottom??0xFDDD7D),\r\n      strip: new THREE.Color(options?.colors?.strip??0x101010),\r\n    }\r\n\r\n    this.settings = {\r\n      radius : options?.radius??15,\r\n      position : options?.position??-14,\r\n      height : options?.height??2,\r\n      stepSize : options?.stepSize??3,\r\n      padLeft : 0.8,\r\n      stripWidth : 1.2,\r\n      stripDepth : 0.5,\r\n      corners: options?.corners??64,\r\n    }\r\n    this.materials = [];\r\n    this.timeout = \"\";\r\n  }\r\n  renderStep = ()=>{\r\n    let {radius,position,height,stepSize,stripColor,options,padLeft,stripWidth,stripDepth,corners} = this.settings;\r\n    let pivot = new THREE.Group();\r\n\r\n    let outerCylinder = new THREE.Mesh(Geometry.hollowCylinder(radius,padLeft,height,corners/2), this.materials[0]);\r\n    outerCylinder.rotation.x = -Math.PI/2;\r\n    outerCylinder.position.set(0, position, 0);\r\n    pivot.add(outerCylinder);\r\n\r\n    let stripLight = new THREE.Mesh(new THREE.RingGeometry( radius-padLeft-stripWidth,radius-padLeft,corners), this.materials[1].clone());\r\n    stripLight.rotation.x = -Math.PI/2;\r\n    stripLight.position.set(0, position-stripDepth+height/2, 0);\r\n    stripLight.layers.enable(1)\r\n    pivot.add(stripLight);\r\n\r\n    let outerInnerCylinder = new THREE.Mesh(new THREE.CylinderGeometry(radius-padLeft-0.01,radius-padLeft-0.01,stripDepth,corners,1,true), this.materials[3]);\r\n    outerInnerCylinder.position.set(0, position+(height-stripDepth)/2, 0);\r\n    pivot.add(outerInnerCylinder);\r\n\r\n    // let innerCylinder = new THREE.Mesh(new THREE.CylinderGeometry(radius-padLeft-stripWidth,radius-padLeft-stripWidth,stripDepth,64), this.materials[0]);\r\n    let innerCylinder = new THREE.Mesh(new THREE.CylinderGeometry(radius-padLeft-stripWidth,radius-padLeft-stripWidth,stripDepth,corners), this.materials[0]);\r\n\r\n    innerCylinder.position.set(0, position-(stripDepth-height)/2, 0);\r\n    pivot.add(innerCylinder);\r\n\r\n    outerCylinder.castShadow = true;\r\n    outerCylinder.receiveShadow = true;\r\n    innerCylinder.castShadow = true;\r\n    innerCylinder.receiveShadow = true;\r\n\r\n    if(!!this.settings.backFill){\r\n      let backCover = new THREE.Mesh(new THREE.RingGeometry(0,radius,corners),this.materials[0]);\r\n      backCover.rotation.x = Math.PI/2;\r\n      backCover.position.set(0, position-height/2, 0);\r\n      pivot.add(backCover);\r\n    }\r\n\r\n    if(corners === 6){\r\n      outerCylinder.rotation.z = Math.PI/6;\r\n      stripLight.rotation.z = Math.PI/6;\r\n    }\r\n    // console.log(pivot);\r\n    this.pivot.add(pivot);\r\n  }\r\n\r\n  loadMaterials = () =>{\r\n\r\n    let cylinderMaterial = new THREE.MeshPhongMaterial({\r\n      color: this.colors.base,\r\n      metalness: 0.0,\r\n      roughness: 0.0,\r\n      clearcoat: 1.0,\r\n      clearcoatRoughness: 0.0,\r\n      reflectivity: 1,\r\n      // toneMapped: false\r\n      shininess: 30,\r\n      specular: this.colors.base,\r\n\r\n    });\r\n    this.materials.push(cylinderMaterial); // 0\r\n\r\n    let lightMaterial = new THREE.MeshPhysicalMaterial({\r\n      toneMapped: false,\r\n      color: 0x000000,\r\n      emissive : this.colors.strip,\r\n      emissiveIntensity :1.2,\r\n      shininess: 300,\r\n    });\r\n\r\n    this.materials.push(lightMaterial); // 1\r\n\r\n    let gradientMaterial = Material.linearGradient(this.colors.base,this.colors.base,1);\r\n    this.materials.push(gradientMaterial); // 2\r\n\r\n    let cylinderMaterial2 = cylinderMaterial.clone();\r\n    cylinderMaterial2.side = THREE.DoubleSide;\r\n    this.materials.push(cylinderMaterial2); // 3\r\n\r\n    let gradientMaterial2 = Material.linearGradient(this.colors.base,this.colors.top,1);\r\n    gradientMaterial2.side = THREE.DoubleSide;\r\n    this.materials.push(gradientMaterial2.clone()); // 4\r\n    gradientMaterial2.uniforms.color2.value = this.colors.middle;\r\n    this.materials.push(gradientMaterial2.clone()); // 5\r\n    gradientMaterial2.uniforms.color2.value = this.colors.bottom;\r\n    this.materials.push(gradientMaterial2.clone()); // 6\r\n\r\n    // let gradientMaterial3 = Material.linearGradient(this.colors.middle,this.colors.base,2);\r\n    let gradientMaterial3 = Material.linearGradient3(this.colors.middle,this.colors.base);\r\n    this.materials.push(gradientMaterial3.clone()); // 7\r\n    gradientMaterial3.uniforms.color1.value = this.colors.bottom;\r\n    this.materials.push(gradientMaterial3.clone()); // 8\r\n\r\n\r\n  }\r\n\r\n  renderBase = () =>{\r\n    this.renderStep()\r\n\r\n    this.settings.radius += this.settings.stepSize;\r\n    this.settings.position -= this.settings.height;\r\n    this.renderStep()\r\n\r\n    this.settings.radius += this.settings.stepSize;\r\n    this.settings.position -= this.settings.height;\r\n    this.settings.backFill = true;\r\n    this.renderStep();\r\n  }\r\n\r\n  // strip light animations\r\n  turnOnLight(lcolor,index){\r\n    this.pivot.children[index].children[1].material.emissive.set(lcolor);\r\n    this.pivot.children[index].children[2].material = this.materials[4+index];\r\n    // this.pivot.children[index].children[2].material.uniforms.color2.value = lcolor;\r\n    this.pivot.children[index].children[3].material = [this.materials[4+index],this.materials[0],this.materials[0]];\r\n  }\r\n  turnOnShadow(sColor,index){\r\n    this.pivot.children[index].children[0].material = [this.materials[0],this.materials[7+index],this.materials[0]];\r\n  }\r\n\r\n  animationOn = () =>{\r\n    this.timeout = setTimeout(()=>{\r\n      this.turnOnLight(this.colors.bottom,2);\r\n      this.turnOnShadow(this.colors.bottom,1);\r\n        this.timeout = setTimeout(()=>{\r\n          this.turnOnLight(this.colors.middle,1);\r\n          this.turnOnShadow(this.colors.middle,0);\r\n            this.timeout = setTimeout(()=>{\r\n              this.turnOnLight(this.colors.top,0);\r\n              if(!!this.animated){\r\n                this.timeout = setTimeout(()=>{\r\n                  this.animationOff()\r\n                  this.timeout = setTimeout(()=>{\r\n                    this.animationOn()\r\n                  },1000)\r\n                },1000)\r\n              }\r\n            }, 1000);\r\n        }, 1000);\r\n    }, 1000);\r\n  }\r\n\r\n  animationOff = () =>{\r\n    this.pivot.children.forEach((item, i) => {\r\n      item.children.forEach((mesh, j) => {\r\n        if (j === 0) {\r\n          mesh.material = this.materials[0];\r\n        }else if(j === 1){\r\n          mesh.material.emissive.set(this.colors.strip);\r\n        }else if (j === 2) {\r\n          mesh.material = this.materials[3];\r\n        }else if (j === 3) {\r\n          mesh.material = this.materials[0];\r\n          // mesh.material[0].uniforms.color2.value = this.colors.base;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n\r\n  setup = (isLight=false,isAnimated=true) =>{\r\n    if(!!this.materials.length) return;\r\n\r\n    this.loadMaterials();\r\n    this.renderBase();\r\n\r\n    if(!!isLight){\r\n      this.turnOnLight(this.colors.bottom,2);\r\n      this.turnOnShadow(this.colors.bottom,1);\r\n      this.turnOnLight(this.colors.middle,1);\r\n      this.turnOnShadow(this.colors.middle,0);\r\n      this.turnOnLight(this.colors.top,0);\r\n      if(!!isAnimated){\r\n        this.animated = true;\r\n        this.timeout = setTimeout(()=>{\r\n          this.animationOff()\r\n          this.timeout = setTimeout(()=>{\r\n            this.animationOn()\r\n          },1000)\r\n        },1000)\r\n      }\r\n    }else if(!!isAnimated) {\r\n      this.animated = true;\r\n      this.timeout = setTimeout(()=>{\r\n        this.animationOn()\r\n      },1000)\r\n    }\r\n    return this.pivot;\r\n  }\r\n\r\n  start = () =>{\r\n    if(this.animated){\r\n      this.stop();\r\n      this.animationOn();\r\n    }else {\r\n      this.animated = true;\r\n      this.animationOn()\r\n    }\r\n  }\r\n\r\n  stop = () =>{\r\n    if(this.animated){\r\n      this.animated = false;\r\n      clearTimeout(this.timeout);\r\n      this.animationOff();\r\n    }\r\n  }\r\n\r\n  dispose = () =>{\r\n    this.stop();\r\n    // Recursively traverse the pivot and dispose of its children\r\n     this.pivot.traverse((child) => {\r\n         if (child.geometry) {\r\n             child.geometry.dispose();\r\n         }\r\n         if (child.material) {\r\n             if (Array.isArray(child.material)) {\r\n                 // Dispose of each material if it's an array\r\n                 child.material.forEach((mat) => mat.dispose());\r\n             } else {\r\n                 child.material.dispose();\r\n             }\r\n         }\r\n         if (child.texture) {\r\n             child.texture.dispose();\r\n         }\r\n     });\r\n\r\n     // Remove the pivot from its parent\r\n     if (this.pivot.parent) {\r\n         this.pivot.parent.remove(this.pivot);\r\n     }\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default GrooveStrip3;\r\n","import * as THREE from 'three';\r\nimport {Material,Geometry} from '../../../helpers';\r\n\r\n\r\n\r\nconst renderStep = (settings,materials)=>{\r\n  let {radius,position,height,stepSize,stripColor,baseColor,options,padLeft,stripWidth,stripDepth} = settings;\r\n  let{cylinderMaterial,stripShadowMaterial} = materials;\r\n  let pivot = new THREE.Group();\r\n\r\n  let lightMaterial = new THREE.MeshPhysicalMaterial({\r\n    color: 0x000000,\r\n    emissive : stripColor,\r\n    emissiveIntensity :1,\r\n  });\r\n  let lightMaterial2 = new THREE.MeshPhysicalMaterial({\r\n    color: 0x000000,\r\n    emissive : baseColor,\r\n    emissiveIntensity :1,\r\n  });\r\n\r\n  let outerCylinder = new THREE.Mesh(Geometry.hollowCylinder(radius,padLeft,height), cylinderMaterial);\r\n  outerCylinder.rotation.x = -Math.PI/2;\r\n  outerCylinder.position.set(0, position, 0);\r\n  pivot.add(outerCylinder);\r\n\r\n  let stripLight = new THREE.Mesh(Geometry.hollowCylinder(radius-padLeft,stripWidth,stripDepth), [lightMaterial,lightMaterial2]);\r\n  stripLight.rotation.x = -Math.PI/2;\r\n  stripLight.position.set(0, position+(stripDepth+height)/2, 0);\r\n  pivot.add(stripLight);\r\n\r\n  let innerCylinder = new THREE.Mesh(new THREE.CylinderGeometry(radius-padLeft-stripWidth,radius-padLeft-stripWidth,stripDepth,64), cylinderMaterial);\r\n  innerCylinder.position.set(0, position-(stripDepth-height)/2, 0);\r\n  pivot.add(innerCylinder);\r\n\r\n  outerCylinder.castShadow = true;\r\n  outerCylinder.receiveShadow = true;\r\n  stripLight.castShadow = true;\r\n\r\n  if(!!settings.backFill){\r\n    let backCover = new THREE.Mesh(new THREE.RingGeometry(0,radius,64),cylinderMaterial);\r\n    backCover.rotation.x = Math.PI/2;\r\n    backCover.position.set(0, position-height/2, 0);\r\n    pivot.add(backCover);\r\n  }\r\n\r\n  return pivot;\r\n}\r\n\r\nconst outwardStrip = (options) =>{\r\n  let animated = options?.animated??true;\r\n  let lightOn = options?.lightOn??false;\r\n  let pivot = new THREE.Group();\r\n  let colors = {\r\n    base : new THREE.Color(options?.colors?.base??0x355C5F),\r\n    top: new THREE.Color(options?.colors?.top??0xED6065),\r\n    middle: new THREE.Color(options?.colors?.middle??0x92DCA8),\r\n    bottom: new THREE.Color(options?.colors?.bottom??0xFDDD7D),\r\n    strip: new THREE.Color(options?.colors?.bottom??0x101010),\r\n  }\r\n  let settings = {\r\n    radius : options?.radius??15,\r\n    position : options?.position??-14,\r\n    height : options?.height??2,\r\n    stepSize : options?.stepSize??3,\r\n    baseColor:colors.base,\r\n    stripColor:colors.strip,\r\n    padLeft : 1.0,\r\n    stripWidth : 1.0,\r\n    stripDepth : 0.3\r\n  }\r\n\r\n  let cylinderMaterial = new THREE.MeshPhysicalMaterial({\r\n    color: colors.base,\r\n    metalness: 0.0,\r\n    roughness: 0.0,\r\n    clearcoat: 1.0,\r\n    clearcoatRoughness: 0.0,\r\n    reflectivity: 1,\r\n  });\r\n  let stripShadowMaterial = cylinderMaterial.clone();\r\n  stripShadowMaterial.side = THREE.BackSide;\r\n\r\n  pivot.add(renderStep(settings,{cylinderMaterial,stripShadowMaterial}));\r\n\r\n  settings.radius += settings.stepSize;\r\n  settings.position -= settings.height;\r\n  pivot.add(renderStep(settings,{cylinderMaterial,stripShadowMaterial}));\r\n\r\n  settings.radius += settings.stepSize;\r\n  settings.position -= settings.height;\r\n  settings.backFill = true;\r\n  pivot.add(renderStep(settings,{cylinderMaterial,stripShadowMaterial}));\r\n\r\n  // strip light animations\r\n\r\n  function turnOnLight(lcolor,index){\r\n    pivot.children[index].children[1].material[0].emissive = lcolor;\r\n    pivot.children[index].children[1].material[1].color = colors.base;\r\n    pivot.children[index].children[1].material[1].emissiveIntensity = 3;\r\n\r\n  }\r\n  function turnOnShadow(sColor,index){\r\n    setTimeout(()=>{\r\n      pivot.children[index].children[0].material = [cylinderMaterial,Material.linearGradient(sColor,colors.base,3)];\r\n    },20)\r\n  }\r\n\r\n  function animationOn(){\r\n    setTimeout(()=>{\r\n      turnOnLight(colors.bottom,2);\r\n      turnOnShadow(colors.bottom,1);\r\n        setTimeout(()=>{\r\n          turnOnLight(colors.middle,1);\r\n          turnOnShadow(colors.middle,0);\r\n            setTimeout(()=>{\r\n              turnOnLight(colors.top,0);\r\n              if(!!animated){\r\n                animationOff()\r\n              }\r\n            }, 1000);\r\n        }, 1000);\r\n    }, 1000);\r\n  }\r\n\r\n  function animationOff(){\r\n    setTimeout(()=>{\r\n      pivot.children.forEach((item, i) => {\r\n        item.children.forEach((mesh, j) => {\r\n          if(!j){\r\n            pivot.children[i].children[j].material = cylinderMaterial;\r\n          }else if (j === 1) {\r\n            pivot.children[i].children[j].material[0].emissive = colors.strip;\r\n            pivot.children[i].children[j].material[1].emissiveIntensity = 1;\r\n          }\r\n        });\r\n      });\r\n      if(!!animated){\r\n        animationOn()\r\n      }\r\n    },1000)\r\n  }\r\n\r\n  if(!!lightOn){\r\n    turnOnLight(colors.bottom,2);\r\n    turnOnShadow(colors.bottom,1);\r\n    turnOnLight(colors.middle,1);\r\n    turnOnShadow(colors.middle,0);\r\n    turnOnLight(colors.top,0);\r\n    if(!!animated){\r\n      animationOff()\r\n    }\r\n\r\n  }else if(!!animated) {\r\n    animationOn()\r\n  }\r\n\r\n\r\n  return pivot;\r\n}\r\n\r\nexport default outwardStrip;\r\n","import * as THREE from 'three';\r\nimport { RectAreaLightUniformsLib }  from 'three/examples/jsm/lights/RectAreaLightUniformsLib';\r\nimport { RectAreaLightHelper } from 'three/addons/helpers/RectAreaLightHelper.js';\r\n\r\nconst environment = (scene) =>{\r\n\r\n  let planeMaterial1 = new THREE.MeshLambertMaterial ({\r\n    color: 0x2a2d3c,\r\n    side: THREE.DoubleSide\r\n  });\r\n  let planeMaterial2 = new THREE.MeshLambertMaterial ({\r\n    color: 0x2C2C2C,\r\n    side: THREE.DoubleSide\r\n  });\r\n\r\n  let backWall = new THREE.Mesh(new THREE.PlaneGeometry(150,90), planeMaterial1);\r\n  backWall.position.set(0, 25.99, -45);\r\n  scene.add(backWall);\r\n\r\n  let floor = new THREE.Mesh(new THREE.PlaneGeometry(150, 70), planeMaterial2);\r\n  floor.position.set(0, -19.01, -10);\r\n  floor.rotation.x = -Math.PI / 2;\r\n  scene.add(floor);\r\n\r\n  backWall.receiveShadow = true;\r\n  floor.receiveShadow = true;\r\n\r\n  RectAreaLightUniformsLib.init()\r\n\r\n  let ambientLight = new THREE.AmbientLight(0xffffff, 0.9); // Soft white light\r\n  scene.add(ambientLight);\r\n\r\n  let hemisphereLight = new THREE.HemisphereLight(0xffffff,0x000000,1);\r\n  hemisphereLight.position.set(0, 50, 0);\r\n  scene.add(hemisphereLight);\r\n  let hemisphereLightHelper = new THREE.HemisphereLightHelper( hemisphereLight, 1);\r\n  scene.add(hemisphereLightHelper);\r\n\r\n  let ceilingLight = new THREE.RectAreaLight(0xffffff,10,50,50);\r\n  ceilingLight.position.set(0, 70, 0);\r\n  // ceilingLight.rotation.x = -Math.PI / 4; // Tilt the light slightly downwards\r\n  ceilingLight.lookAt(0, 0, 0);\r\n  ceilingLight.matrixAutoUpdate = true\r\n  // ceilingLight.castShadow = true;\r\n  scene.add(ceilingLight);\r\n  let ceilingLightHelper = new RectAreaLightHelper(ceilingLight);\r\n  scene.add(ceilingLightHelper);\r\n\r\n\r\n\r\n\r\n  // const pointLight = new THREE.PointLight(0xffffff, 10, 100); // Light source 1\r\n  // pointLight.position.set(0, 0,0); // Positioned in front\r\n  // pointLight.matrixAutoUpdate = true;\r\n  // self.scene.add(pointLight);\r\n  // const pointLightHelper = new THREE.PointLightHelper( pointLight, 10 );\r\n  // self.scene.add( pointLightHelper );\r\n\r\n\r\n\r\n\r\n\r\n  // SpotLight for dramatic lighting effect\r\n  // const spotLight = new THREE.SpotLight(0xffff00, 100);\r\n  // spotLight.position.set(-40, 40, 40);\r\n  // spotLight.target.position.set(0, 0, 0);\r\n  // spotLight.castShadow = true; // Enable shadow casting\r\n  // spotLight.shadow.mapSize.width = 1024;\r\n  // spotLight.shadow.mapSize.height = 1024;\r\n  // spotLight.angle = Math.PI / 6; // Spotlight cone angle\r\n  // scene.add(spotLight);\r\n  // scene.add(spotLight.target);\r\n  //\r\n  // const spotLightHelper = new THREE.SpotLightHelper(spotLight);\r\n  // scene.add(spotLightHelper);\r\n\r\n\r\n  // let shadowLight = new THREE.DirectionalLight(0xffffff, 1);\r\n  // shadowLight.position.set(20, 30, -20);\r\n  // shadowLight.target.position.set(0, -10, 0);\r\n  // shadowLight.matrixAutoUpdate = true;\r\n  // shadowLight.castShadow = true;\r\n  // // shadowLight.shadowCameraVisible = true;\r\n  //\r\n  // shadowLight.shadow.camera.near = 10;\r\n  // shadowLight.shadow.camera.far = 80;\r\n  // shadowLight.shadow.camera.left = -22;\r\n  // shadowLight.shadow.camera.right = 22;\r\n  // shadowLight.shadow.camera.top = 15;\r\n  // shadowLight.shadow.camera.bottom = -15;\r\n  //\r\n  // shadowLight.shadow.mapSize.width = 1024;\r\n  // shadowLight.shadow.mapSize.height = 1024;\r\n  //\r\n  // scene.add(shadowLight);\r\n  // scene.add(shadowLight.target);\r\n  // let shadowLightHelper = new THREE.DirectionalLightHelper(shadowLight, 5);\r\n  // scene.add(shadowLightHelper);\r\n  // let shadowLightCamera = new THREE.CameraHelper(shadowLight.shadow.camera);\r\n  // scene.add( shadowLightCamera );\r\n\r\n\r\n  // let shadowLight2 = new THREE.DirectionalLight(0xffffff, 1);\r\n  // shadowLight2.position.set(0, 0, 40);\r\n  // shadowLight2.target.position.set(0, 0, 0);\r\n  // scene.add(shadowLight2);\r\n  // let shadowLightHelper2 = new THREE.DirectionalLightHelper(shadowLight2, 5);\r\n  // scene.add(shadowLightHelper2);\r\n\r\n  // let frontLight = new THREE.RectAreaLight(0xffffff,0.5,150,70);;\r\n  // frontLight.position.set(0, 0, 50);\r\n  // frontLight.lookAt(0, 0, 0);\r\n  // frontLight.matrixAutoUpdate = true\r\n  // // frontLight.castShadow = true;\r\n  // scene.add(frontLight);\r\n  // let frontLightHelper = new RectAreaLightHelper(frontLight);\r\n  // scene.add(frontLightHelper);\r\n\r\n\r\n  // let pointLight = new THREE.PointLight(0xffffff, 100, 1000);\r\n  // pointLight.position.set(0, 0,0);\r\n  // pointLight.matrixAutoUpdate = true;\r\n  // scene.add(pointLight);\r\n  // let pointLightHelper = new THREE.PointLightHelper( pointLight, 10 );\r\n  // scene.add( pointLightHelper );\r\n\r\n\r\n\r\n  // let ambientLight = new THREE.AmbientLight(0xffffff, 0.4); // Soft white light\r\n  // scene.add(ambientLight);\r\n\r\n  // Directional Light\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\r\n    directionalLight.position.set(100, 200, 100);\r\n    directionalLight.castShadow = true;\r\n    // scene.add(directionalLight);\r\n\r\n    // Spotlights for Stage\r\n    const spotLight1 = new THREE.SpotLight(0xffffff, 0.8);\r\n    spotLight1.position.set(0, 100, 100);\r\n    spotLight1.castShadow = true;\r\n    // scene.add(spotLight1);\r\n\r\n    const spotLight2 = new THREE.SpotLight(0xffffff, 0.8);\r\n    spotLight2.position.set(0, 300, -150);\r\n    spotLight2.castShadow = true;\r\n    // scene.add(spotLight2);\r\n\r\n    // Point Lights for Accent\r\n    const pointLight1 = new THREE.PointLight(0x00ffff, 1, 2000);\r\n    pointLight1.position.set(50, 100, 50);\r\n    // scene.add(pointLight1);\r\n\r\n    const pointLight2 = new THREE.PointLight(0xff00ff, 1, 2000);\r\n    pointLight2.position.set(-50, 100, -50);\r\n    // scene.add(pointLight2);\r\n\r\n    const pointLight3 = new THREE.PointLight(0xffffff, 1, 2000);\r\n    pointLight3.position.set(0, 0, 50);\r\n    // scene.add(pointLight3);\r\n\r\n    // Add Helpers (Optional, for Debugging)\r\n    const directionalHelper = new THREE.DirectionalLightHelper(directionalLight, 20);\r\n    const spotLightHelper1 = new THREE.SpotLightHelper(spotLight1);\r\n    const spotLightHelper2 = new THREE.SpotLightHelper(spotLight2);\r\n    const pointLightHelper1 = new THREE.PointLightHelper(pointLight1, 10);\r\n    const pointLightHelper2 = new THREE.PointLightHelper(pointLight2, 10);\r\n    const pointLightHelper3 = new THREE.PointLightHelper(pointLight3, 10);\r\n\r\n    // scene.add(\r\n    //   // directionalHelper,\r\n    //   // spotLightHelper1,\r\n    //   // spotLightHelper2,\r\n    //   // pointLightHelper1,\r\n    //   // pointLightHelper2,\r\n    //   // pointLightHelper3\r\n    // );\r\n}\r\n\r\n\r\nexport default environment;\r\n","import * as THREE from 'three';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\r\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\r\nimport { BloomPass } from 'three/examples/jsm/postprocessing/BloomPass.js';\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';\r\nimport {OutputPass} from 'three/addons/postprocessing/OutputPass.js';\r\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader.js';\r\n\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { GUI } from 'three/addons/libs/lil-gui.module.min.js';\r\n\r\nconst AdditiveBlendingShader = new THREE.ShaderMaterial( {\r\n  uniforms: {\r\n    baseTexture: { value: null },\r\n    bloomTexture: { value: null }\r\n  },\r\n  vertexShader: `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }`,\r\n  fragmentShader: `\r\n    uniform sampler2D baseTexture;\r\n    uniform sampler2D bloomTexture;\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vec4 color = texture2D(baseTexture, vUv);\r\n      vec4 add = texture2D(bloomTexture, vUv);\r\n      gl_FragColor = color + vec4( 1.0 ) * add;\r\n    }`,\r\n  defines: {}\r\n});\r\n\r\n\r\nclass ThreeSetup{\r\n  constructor(sceneRef) {\r\n    this.sceneRef = sceneRef;\r\n    this.canvas = sceneRef.current.children[0];\r\n    this.width =  sceneRef.current.offsetWidth;\r\n    this.height =  window.innerHeight - 80;\r\n\r\n    this.renderer = null;\r\n    this.scene = null;\r\n    this.camera = null;\r\n    this.controls = null;\r\n\r\n    this.fxaaPass = null;\r\n    this.bloomLayer = null;\r\n    this.bloomPass = null;\r\n    this.bloomComposer = null;\r\n    this.composer = null;\r\n\r\n    this.params = {\r\n      shadow:true,\r\n    }\r\n    this.bloomparams = {\r\n      enabled:false,\r\n      strength: 0.2,\r\n      radius: 0.1,\r\n      exposure: 0.85,\r\n    }\r\n  }\r\n\r\n  setupRenderer = () =>{\r\n    // Create the WebGLRenderer with the canvas\r\n    this.renderer = new THREE.WebGLRenderer({\r\n      canvas:this.canvas,\r\n      antialias:true,\r\n      alpha: true,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    this.renderer.setSize(this.width,this.height);\r\n    this.renderer.setPixelRatio(window.devicePixelRatio);\r\n    this.renderer.setClearColor(0x000000);\r\n\r\n    this.renderer.toneMapping = THREE.ReinhardToneMapping;\r\n    this.renderer.toneMappingExposure = 1;\r\n\r\n    if(this.params.shadow){\r\n      this.renderer.shadowMap.enabled = true;\r\n      this.renderer.shadowMap.type = THREE.PCFSoftShadowMap; //THREE.BasicShadowMap | THREE.PCFShadowMap |  THREE.VSMShadowMap | THREE.PCFSoftShadowMap\r\n    }\r\n  }\r\n\r\n  setupCamera = () =>{\r\n    // Create the camera\r\n    this.camera = new THREE.PerspectiveCamera(75, this.width/this.height, 0.1, 1000);\r\n    this.camera.position.set(0,2,50);\r\n    this.camera.lookAt(new THREE.Vector3(0,-6,0));\r\n\r\n    // this.camera.zoom = 0.5;\r\n    // this.camera.updateProjectionMatrix();\r\n\r\n  }\r\n\r\n  setupScene = () =>{\r\n    // Create the scene\r\n    this.scene = new THREE.Scene();\r\n    this.scene.add(new THREE.AxesHelper(10));\r\n    // self.scene.add(new THREE.CameraHelper(self.camera))\r\n  }\r\n\r\n  setupControls = () =>{\r\n    // Add controls\r\n    this.controls = new OrbitControls(this.camera, this.canvas);\r\n    this.controls.target = new THREE.Vector3(0, 0, 0);\r\n    this.controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\r\n    this.controls.dampingFactor = 0.25;\r\n    this.controls.screenSpacePanning = false;\r\n    this.controls.maxDistance = 100;\r\n    this.controls.minDistance = 2;\r\n    this.controls.enableZoom  = true;\r\n    this.controls.enableKeys = true //older versions\r\n\r\n    this.controls.keys = {\r\n      LEFT: 'ArrowLeft', //left arrow\r\n      UP: 'ArrowUp', // up arrow\r\n      RIGHT: 'ArrowRight', // right arrow\r\n      BOTTOM: 'ArrowDown' // down arrow\r\n    }\r\n    this.controls.mouseButtons = {\r\n      LEFT: THREE.MOUSE.ROTATE,\r\n      RIGHT: THREE.MOUSE.PAN\r\n    }\r\n    this.controls.touches = {\r\n      ONE: THREE.TOUCH.ROTATE,\r\n      TWO: THREE.TOUCH.DOLLY_PAN\r\n    }\r\n    this.controls.update();\r\n  }\r\n\r\n  setupComposer = () =>{\r\n    // Set up the post-processing\r\n    let renderPass = new RenderPass(this.scene, this.camera);\r\n\r\n    if(!this.bloomparams.enabled){\r\n      this.composer = new EffectComposer(this.renderer);\r\n      this.composer.addPass(renderPass);\r\n    }else {\r\n      this.bloomLayer = new THREE.Layers();\r\n      this.bloomLayer.set(1);\r\n\r\n      // Unreal Bloom Pass with parameters: strength, radius, threshold\r\n      this.bloomPass = new UnrealBloomPass( new THREE.Vector2(this.width,this.height), 1.5, 0.4, 0.85 );\r\n      this.bloomPass.strength = this.bloomparams.strength;\r\n      this.bloomPass.radius = this.bloomparams.radius;\r\n      this.bloomPass.threshold = this.bloomparams.threshold;\r\n      this.bloomComposer = new EffectComposer(this.renderer);\r\n      this.bloomComposer.renderToScreen = false;\r\n      this.bloomComposer.addPass(renderPass);\r\n      this.bloomComposer.addPass(this.bloomPass);\r\n\r\n      let outputPass = new OutputPass();\r\n\r\n      this.composer = new EffectComposer(this.renderer);\r\n      this.composer.addPass(renderPass);\r\n\r\n      let blendPass = new ShaderPass(AdditiveBlendingShader,\"baseTexture\");\r\n      blendPass.uniforms.bloomTexture.value = this.bloomComposer.renderTarget2.texture;\r\n      blendPass.needsSwap = true;\r\n      this.composer.addPass(blendPass);\r\n      this.composer.addPass(outputPass);\r\n\r\n      this.fxaaPass = new ShaderPass(FXAAShader);\r\n      let pixelRatio = this.renderer.getPixelRatio();\r\n      this.fxaaPass.material.uniforms['resolution'].value.set(1 / (this.width * pixelRatio), 1 / (this.height * pixelRatio));\r\n      this.composer.addPass(this.fxaaPass);\r\n    }\r\n  }\r\n\r\n  disposeComposer = () =>{\r\n    if(!!this.bloomComposer){\r\n      this.bloomLayer = null;\r\n      this.bloomPass.dispose();\r\n      this.bloomPass = null;\r\n      this.fxaaPass.dispose();\r\n      this.fxaaPass = null;\r\n      this.bloomComposer.dispose();\r\n      this.bloomComposer = null;\r\n    }\r\n    this.composer.dispose();\r\n    this.composer = null;\r\n  }\r\n\r\n  getScene = () => this.scene;\r\n\r\n  render = () =>{\r\n    if(!!this.bloomComposer){\r\n      let materials = {};\r\n      let darkMaterial = new THREE.MeshPhysicalMaterial({color:'black',emissiveIntensity:0});\r\n      this.scene.traverse((obj)=>{\r\n        if ( obj.isMesh && this.bloomLayer.test(obj.layers) === false) {\r\n          materials[ obj.uuid ] = obj.material;\r\n          obj.material = darkMaterial;\r\n        }\r\n      });\r\n      this.bloomComposer.render();\r\n      this.scene.traverse((obj)=>{\r\n        if (materials[ obj.uuid ] ) {\r\n          obj.material = materials[ obj.uuid ];\r\n          delete materials[ obj.uuid ];\r\n        }\r\n      });\r\n    }\r\n    this.composer.render();\r\n  }\r\n\r\n  handleResize = () => {\r\n    let width =  this.sceneRef.current.offsetWidth;\r\n    let height =  window.innerHeight - 80;\r\n    // Adjust the camera aspect ratio and renderer size when the window is resized\r\n    this.camera.aspect = width / height;\r\n    this.camera.updateProjectionMatrix();\r\n\r\n    this.renderer.setSize(width,height);\r\n    if(this.bloomComposer){\r\n      let pixelRatio = this.renderer.getPixelRatio();\r\n      this.fxaaPass.material.uniforms['resolution'].value.set(1 / (width * pixelRatio), 1 / (height * pixelRatio));\r\n      this.bloomComposer.setSize(width,height);\r\n    }\r\n    this.composer.setSize(width,height);\r\n  }\r\n\r\n  dispose = () =>{\r\n    if (this.renderer) {\r\n      this.renderer.dispose();\r\n    }\r\n  }\r\n\r\n  guiInputs = (bloomPass) =>{\r\n    let gui = new GUI();\r\n    let bloomFolder = gui.addFolder('bloom');\r\n    let self = this;\r\n    bloomFolder.add( this.bloomparams,'enabled',0.0,3 ).listen().onChange(function(value){\r\n      self.disposeComposer();\r\n      self.setupComposer();\r\n    });\r\n    bloomFolder.add( this.bloomparams,'strength',0.0,3 ).onChange(function(value){\r\n      self.bloomPass.strength = Number(value);\r\n    });\r\n    bloomFolder.add(this.bloomparams,'radius',0.0,1.0).step(0.01).onChange(function(value){\r\n      self.bloomPass.radius = Number(value);\r\n    });\r\n    bloomFolder.add(this.bloomparams,'exposure',0.0,1.0).onChange(function(value){\r\n      self.bloomPass.exposure = Number(value);\r\n    });\r\n  }\r\n\r\n  init(){\r\n    this.setupRenderer()\r\n    this.setupCamera();\r\n    this.setupScene();\r\n    this.setupControls();\r\n    this.setupComposer();\r\n\r\n    this.guiInputs()\r\n  }\r\n}\r\n\r\n\r\nexport default ThreeSetup;\r\n","import * as THREE from 'three';\r\nimport { RectAreaLightUniformsLib }  from 'three/examples/jsm/lights/RectAreaLightUniformsLib';\r\nimport { RectAreaLightHelper } from 'three/addons/helpers/RectAreaLightHelper.js';\r\n\r\n\r\nimport {Material,Geometry,Textures} from '../../../helpers';\r\n\r\nimport * as Models from './models.js';\r\n\r\nclass SpaceShipPacket{\r\n  constructor(options){\r\n    this.pivot = new THREE.Group();\r\n    this.timeout = \"\";\r\n    this.colors = {\r\n      base : new THREE.Color(options?.colors?.base??0x355C5F),\r\n      top: new THREE.Color(options?.colors?.top??0xED6065),\r\n      middle: new THREE.Color(options?.colors?.middle??0x92DCA8),\r\n      bottom: new THREE.Color(options?.colors?.bottom??0xFDDD7D),\r\n      strip: new THREE.Color(options?.colors?.strip??0x101010),\r\n    };\r\n\r\n    this.settings = {\r\n      width : options?.width??20,\r\n      height : options?.height??30,\r\n      depth : options?.depth??5,\r\n      fR1 : 0.2,sR1 : 2,pD1:0.1,\r\n      fR2 : 0.5,sR2 : 0.5,pD2:0.1,\r\n    };\r\n\r\n    this.materials = [];\r\n\r\n  }\r\n\r\n  loadMaterials = () =>{\r\n\r\n    let cubeRenderTarget = new THREE.WebGLCubeRenderTarget(256, {\r\n      format: THREE.RGBAFormat,\r\n      generateMipmaps: true,\r\n      minFilter: THREE.LinearMipmapLinearFilter,\r\n    });\r\n    this.cubeCamera = new THREE.CubeCamera(0.1, 1000, cubeRenderTarget);\r\n\r\n    let baseMaterial = new THREE.MeshPhongMaterial({\r\n      // metalness: 0.0,\r\n      // roughness: 0.05,\r\n      // transmission: 1.0,\r\n      reflectivity: 0.9,\r\n      // clearcoat: 1,\r\n      // clearcoatRoughness: 0.0,\r\n      color: 0x8FBC8F,\r\n      shininess: 30,\r\n      specular: 0xffffff,\r\n    });\r\n\r\n    this.materials.push(baseMaterial); // 0\r\n\r\n\r\n    const glassMaterial = new THREE.MeshPhysicalMaterial({\r\n      // color: 0xffffff,           // Base color of the glass\r\n      metalness: 0.0,              // Non-metallic material\r\n      roughness: 0.05,              // Perfectly smooth surface\r\n      transmission: 1.0,           // Fully transparent\r\n      transparent: true,\r\n      reflectivity: 0.9,         // Strong reflections\r\n      opacity: 1.0,                // Must be 1 to work with `transmission`\r\n      ior: 1.5,                  // Index of Refraction for realistic glass\r\n      thickness: 0.0,            // Simulated thickness of the glass\r\n      clearcoat: 1,              // Adds a clear coat for extra shininess\r\n      clearcoatRoughness: 0.0,     // Clear coat is perfectly smooth\r\n      envMapIntensity: 1,        // Intensity of the environment reflections\r\n      depthWrite: false,         // Prevents z-buffer occlusion\r\n      side: THREE.DoubleSide,\r\n      // side: THREE.FrontSide,\r\n    });\r\n\r\n    this.materials.push(glassMaterial.clone()); // 1\r\n\r\n    // glassMaterial.envMap = cubeRenderTarget.texture;\r\n    // glassMaterial.thickness = 0.5;\r\n    this.materials.push(glassMaterial); // 2\r\n\r\n    let lightMaterial = new THREE.MeshPhysicalMaterial({\r\n      toneMapped: false,\r\n      color: 0x000000,\r\n      emissive : 0xffffff,\r\n      emissiveIntensity :1,\r\n      // specular: 0xFF005C,\r\n      // shininess: 300,\r\n    });\r\n\r\n    this.materials.push(lightMaterial); // 3\r\n\r\n\r\n  }\r\n\r\n  renderPacket = () =>{\r\n    let {width,height,depth,fR1,sR1,fR2,sR2,pD1,pD2} = this.settings;\r\n\r\n    let backLayer = new THREE.Mesh(Geometry.solidBox3(width+8,height+10,pD1,fR1,sR1, 32), this.materials[0]);\r\n    backLayer.position.set(0, 0, pD1/2+fR1);\r\n    backLayer.castShadow = true;\r\n    // backLayer.rotation.x = -Math.PI/18;\r\n    this.pivot.add(backLayer);\r\n\r\n    // let glassSupport = new THREE.Mesh(Geometry.hollowBox(width+2,height+2,1,1,0.5), this.materials[0]);\r\n    // glassSupport.material.color.set(0xffff00);\r\n    // glassSupport.position.set(0, -1, 0.05+faceRadius);\r\n    // glassSupport.rotation.x = -Math.PI/18;\r\n    // this.pivot.add(glassSupport);\r\n\r\n    let stripLight = new THREE.Mesh(Geometry.hollowBox2(width-1,height-1,pD2,1,0.2,sR2), [this.materials[3],this.materials[0],this.materials[0]]);\r\n    stripLight.position.set(0, 0, pD1+fR1*2+0.2+pD2/2);\r\n    // stripLight.rotation.x = -Math.PI/18;\r\n    this.pivot.add(stripLight);\r\n\r\n    this.glassLayer = new THREE.Mesh(Geometry.solidBox2(width,height,depth,fR2,sR2,8), this.materials[2]);\r\n    // this.glassLayer.rotation.x = -Math.PI/18;\r\n    this.glassLayer.position.set(0, 0, pD1+fR1*2+fR2+depth/2);\r\n    this.pivot.add(this.glassLayer);\r\n\r\n    let glassSticker = Geometry.hollowBox3Face2(width+fR2*2,4,depth+fR2*2,0.2,fR2);\r\n    glassSticker.material = this.materials[0].clone();\r\n    glassSticker.position.set(0, -10, pD1+fR1*2+fR2+0.1+depth/2);\r\n    this.pivot.add(glassSticker);\r\n\r\n    this.renderModel();\r\n    this.addLights();\r\n  }\r\n\r\n  renderModel = async() =>{\r\n    try {\r\n      let {width,height,depth,fR1,sR1,fR2,sR2,pD1} = this.settings;\r\n\r\n      let _gltf = await Models.SpaceShip1();\r\n      let size = new THREE.Box3().setFromObject(_gltf).getSize(new THREE.Vector3());\r\n      // console.log(size);\r\n\r\n      let _scale = Math.min(width/size.x, height/size.y,depth/size.z);\r\n      _gltf.position.setZ(pD1+fR1+fR2+depth/2);\r\n      // _gltf.rotation.x -= Math.PI/18;\r\n\r\n      let _glassMaterial = this.materials[1].clone();\r\n      _glassMaterial.color.set(0xffffff);\r\n      let moldShape = _gltf.clone();\r\n      moldShape.scale.set(_scale,_scale,_scale);\r\n      moldShape.traverse((child) => {\r\n        if (child.isMesh) {\r\n          child.material = _glassMaterial;\r\n        }\r\n      });\r\n\r\n      this.pivot.add(moldShape);\r\n\r\n      let _m = _gltf.children[0].children[0].material;\r\n      _m.metalness = 0.5;\r\n      _m.roughness = 0.2;\r\n      _m.clearcoat = 1;\r\n      _m.clearcoatRoughness = 0;\r\n      // _m.transmission = 0.01;\r\n      _m.reflectivity = 0.5;\r\n      // _m.emissive.set(0xff0000);\r\n      // _m.emissiveIntensity = 0.1;\r\n      _gltf.scale.set(_scale*0.95,_scale*0.95,_scale*0.95);\r\n      this.pivot.add(_gltf);\r\n\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n\r\n  addLights = () =>{\r\n    let {width,height,depth,fR1,sR1,fR2,sR2,pD1} = this.settings;\r\n\r\n    RectAreaLightUniformsLib.init()\r\n    let light = new THREE.RectAreaLight(0xffffff,1,depth+2*fR2,height+2*fR2);\r\n    light.position.set(width/2+fR2-0.5,0,depth/2+pD1+fR1*2+fR2);\r\n    light.lookAt(0, 0, depth/2+pD1+fR1*2+fR2);\r\n    light.matrixAutoUpdate = true\r\n    this.pivot.add(light);\r\n\r\n    light = light.clone();\r\n    light.position.x *= -1;\r\n    light.lookAt(0, 0, depth/2+pD1+fR1*2+fR2);\r\n    this.pivot.add(light);\r\n\r\n    light = light.clone();\r\n    light.height = width+2*fR2;\r\n    light.position.set(0,height/2+fR2-0.5,depth/2+pD1+fR1*2+fR2);\r\n    light.lookAt(0, 0, depth/2+pD1+fR1*2+fR2);\r\n    light.rotation.z = Math.PI/2;\r\n    this.pivot.add(light);\r\n\r\n    light = light.clone();\r\n    light.position.y *= -1;\r\n    light.lookAt(0, 0, depth/2+pD1+fR1*2+fR2);\r\n    light.rotation.z = Math.PI/2;\r\n\r\n    this.pivot.add(light);\r\n\r\n    // let lightHelper = new RectAreaLightHelper(light);\r\n    // this.pivot.add(lightHelper);\r\n\r\n  }\r\n\r\n  setup = () =>{\r\n    this.loadMaterials();\r\n    // this.pivot.rotation.x = -Math.PI/18;\r\n    this.pivot.rotation.y = -Math.PI/6;\r\n    this.pivot.position.set(0, 10, 0);\r\n    // this.pivot.rotation.set(-Math.PI/18,-Math.PI/6,0);\r\n    // this.pivot.quaternion.setFromEuler(new THREE.Euler(-Math.PI/18,-Math.PI/6,0));\r\n    this.pivot.rotation.z = 0;\r\n    this.pivot.add(new THREE.AxesHelper(15));\r\n\r\n    this.renderPacket();\r\n\r\n    // this.pivot.traverse((child) => {\r\n    //   if (child.isMesh) {\r\n    //     child.rotation.x = -Math.PI/18;;\r\n    //   }\r\n    // });\r\n\r\n    return this.pivot;\r\n  }\r\n\r\n  animate = (renderer, scene) =>{\r\n    // this.pivot.rotation.y -= 0.008;\r\n\r\n    if(!this.cubeCamera) return;\r\n    // console.log(\"here\");\r\n    this.glassLayer.visible = false; // Hide glass mesh during CubeCamera render\r\n    this.cubeCamera.position.copy(this.glassLayer.position); // Align CubeCamera to glass\r\n    this.cubeCamera.update(renderer, scene); // Capture reflections\r\n    this.glassLayer.visible = true; // Show the glass mesh after reflection capture\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default SpaceShipPacket;\r\n","import * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\r\n\r\n// import skull3d from '../../assets/space-ship.glb';\r\n\r\n\r\nconst SpaceShip1 = async() =>{\r\n  try {\r\n    let loader = new GLTFLoader();\r\n    let gltf = await loader.loadAsync(require('../assets/space-ship1.glb'));\r\n    gltf = gltf.scene;\r\n    gltf.rotation.x = -Math.PI/2;\r\n    gltf.rotation.z = Math.PI;\r\n\r\n    // const glassMaterial = new THREE.MeshPhysicalMaterial({\r\n    //   color: 0xffffff,           // Base color of the glass\r\n    //   metalness: 0.0,              // Non-metallic material\r\n    //   roughness: 0.05,              // Perfectly smooth surface\r\n    //   transmission: 1.0,           // Fully transparent\r\n    //   reflectivity: 0.9,         // Strong reflections\r\n    //   opacity: 1.0,                // Must be 1 to work with `transmission`\r\n    //   ior: 1.5,                  // Index of Refraction for realistic glass\r\n    //   thickness: 0.0,            // Simulated thickness of the glass\r\n    //   clearcoat: 1,              // Adds a clear coat for extra shininess\r\n    //   clearcoatRoughness: 0.0,     // Clear coat is perfectly smooth\r\n    //   envMapIntensity: 1,        // Intensity of the environment reflections\r\n    //   depthWrite: false,         // Prevents z-buffer occlusion\r\n    //   side: THREE.DoubleSide,\r\n    //   // side: THREE.FrontSide,\r\n    // });\r\n    //\r\n    // // console.log(gltf);\r\n    // gltf.traverse((child) => {\r\n    //   if (child.isMesh) {\r\n    //     // console.log(child.material);\r\n    //     // Replace material with MeshPhysicalMaterial\r\n    //     child.material = glassMaterial;\r\n    //   }\r\n    // });\r\n\r\n    return gltf;\r\n  } catch (e) {\r\n     return null;\r\n  }\r\n}\r\nconst SpaceShip2 = async() =>{\r\n  try {\r\n    let loader = new GLTFLoader();\r\n    let gltf = await loader.loadAsync(require('../../assets/space-ship2.glb'));\r\n    gltf = gltf.scene;\r\n    gltf.rotation.x = -Math.PI/2;\r\n    gltf.rotation.z = Math.PI;\r\n\r\n    let _scale = 1.8;\r\n    gltf.scale.set(_scale,_scale,_scale);\r\n    return gltf;\r\n  } catch (e) {\r\n     return null;\r\n  }\r\n}\r\nconst SpaceShip3 = async() =>{\r\n  try {\r\n    let loader = new GLTFLoader();\r\n    let gltf = await loader.loadAsync(require('../../assets/space-ship3.glb'));\r\n    gltf = gltf.scene;\r\n    gltf.rotation.x = -Math.PI/2;\r\n    gltf.rotation.z = Math.PI;\r\n    let _scale = 2;\r\n    gltf.scale.set(_scale,_scale,_scale);\r\n    return gltf;\r\n  } catch (e) {\r\n     return null;\r\n  }\r\n}\r\nconst testttt = async() =>{\r\n  try {\r\n\r\n  } catch (e) {\r\n     return null;\r\n  }\r\n}\r\n\r\nconst test = async(scene) =>{\r\n  try {\r\n    let data = await SpaceShip3();\r\n    // let data = await SussyImposter();\r\n\r\n\r\n    scene.add(data)\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nexport { SpaceShip1 };\r\n// export default loadSkull;\r\n","\r\nimport * as THREE from 'three';\r\nimport { createCanvas} from 'canvas';\r\n\r\nimport backgroundImage from '../assets/granite_tile.jpg';\r\n\r\n\r\n\r\nconst cubeTexture = () =>{\r\n  // Cube Map image paths\r\n  let loader = new THREE.CubeTextureLoader();\r\n  let texture = loader.load([\r\n    backgroundImage, // Positive X (right)\r\n    backgroundImage, // Negative X (left)\r\n    backgroundImage, // Positive Y (top)\r\n    backgroundImage, // Negative Y (bottom)\r\n    backgroundImage, // Positive Z (front)\r\n    backgroundImage  // Negative Z (back)\r\n  ]);\r\n  return texture;\r\n}\r\n\r\n\r\nconst sphereTexture = () =>{\r\n  // Cube Map image paths\r\n  let loader = new THREE.TextureLoader();\r\n  let texture = loader.load(require(\"../assets//metal_plate.jpg\"));\r\n  return texture;\r\n}\r\n\r\nconst toHexColor = (color) =>{\r\n  if(color instanceof THREE.Color) return `#${color.getHexString()}`;\r\n  if(color[0] === \"#\") return color;\r\n  if (typeof color === 'number' || color.startsWith('0x')) return`#${color.toString(16)}`;\r\n  return color\r\n}\r\n\r\nconst gradientColor = (color1=0xffffff,color2=0x000000,stop1=0,stop2=1,scale=1) =>{\r\n\r\n  color1 = toHexColor(color1);\r\n  color2 = toHexColor(color2);\r\n\r\n  let width = 256;\r\n  let height = 256;\r\n  let canvas = createCanvas(width,height);\r\n  let ctx = canvas.getContext('2d');\r\n  ctx.clearRect( 0, 0,width,height);\r\n\r\n  let gradient = ctx.createLinearGradient(0,0, 0,height*scale);\r\n  gradient.addColorStop(stop1, color1);\r\n  gradient.addColorStop(stop2, color2);\r\n\r\n  ctx.fillStyle = gradient;\r\n  ctx.fillRect(0, 0, width, height);\r\n\r\n  // Create an overlay to increase intensity\r\n  ctx.globalAlpha = 1;\r\n  ctx.globalCompositeOperation = 'overlay';\r\n  ctx.drawImage(canvas, 0, 0);\r\n\r\n  // Convert canvas to texture\r\n  const texture = new THREE.CanvasTexture(canvas);\r\n  texture.colorSpace  = THREE.SRGBColorSpace; // Ensures accurate color in sRGB space\r\n  texture.minFilter = THREE.LinearFilter;\r\n  texture.magFilter = THREE.LinearFilter;\r\n  texture.wrapS = THREE.ClampToEdgeWrapping; // Prevent horizontal repeat\r\n  texture.wrapT = THREE.ClampToEdgeWrapping;\r\n  texture.needsUpdate = true;\r\n\r\n  // texture.wrapS = THREE.RepeatWrapping;\r\n  // texture.wrapT = THREE.RepeatWrapping;\r\n  // texture.repeat.set(1, 1);\r\n\r\n  return texture;\r\n}\r\n\r\nexport {\r\n  cubeTexture,\r\n  sphereTexture,\r\n  gradientColor,\r\n};\r\n","import * as THREE from 'three';\r\n\r\nconst linearGradient = (start=0xffffff,end=0x000000,height=2) =>{\r\n  let vertexShader = `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }`\r\n  let fragmentShader = `\r\n    varying vec2 vUv;\r\n    uniform vec3 color1;\r\n    uniform vec3 color2;\r\n    uniform float height;\r\n\r\n    void main() {\r\n      float adjustedDist = (vUv.y + height / 2.0) / height; // Normalized value;\r\n      gl_FragColor = vec4(mix(color1, color2, adjustedDist), 1.0);\r\n    }`\r\n\r\n    return new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        color1: {value: new THREE.Color(start)},\r\n        color2: {value: new THREE.Color(end)},\r\n        height: { value: height }  // Height of the gradient\r\n      },\r\n      vertexShader: vertexShader,\r\n      fragmentShader: fragmentShader\r\n    })\r\n}\r\n\r\nconst linearGradient2 = (start=0xffffff,end=0x000000,height=0) =>{\r\n  let vertexShader = `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }`\r\n  let fragmentShader = `\r\n    uniform vec3 color1;\r\n    uniform vec3 color2;\r\n    varying vec2 vUv;\r\n    uniform float height; // Controls the skew toward one color\r\n\r\n    void main() {\r\n      float gradientFactor = smoothstep(0.0, 1.0, vUv.y + height);\r\n      vec3 color = mix(color1, color2, gradientFactor);\r\n      gl_FragColor = vec4(color, 1.0);\r\n    }`\r\n\r\n    return new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        color1: {value: new THREE.Color(start)},\r\n        color2: {value: new THREE.Color(end)},\r\n        height: { value: height } // Adjust to control prominence\r\n      },\r\n      vertexShader: vertexShader,\r\n      fragmentShader: fragmentShader\r\n    })\r\n}\r\n\r\nconst linearGradient3 = (start=0xffffff,end=0x000000,intensity=1,offset=10,gradientPower=1,height=2) =>{\r\n  let vertexShader = `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }`\r\n  let fragmentShader = `\r\n    uniform vec3 color1;\r\n    uniform vec3 color2;\r\n    uniform float intensity;     // Controls gradient strength\r\n    uniform float offset;        // Adjusts the starting point of the gradient\r\n    uniform float gradientPower; // Controls the rate of blending between colors\r\n    varying vec2 vUv;\r\n\r\n    void main() {\r\n      float gradientFactor = pow(smoothstep(offset, 1.0, vUv.y), gradientPower) * intensity;\r\n      vec3 color = mix(color1, color2, gradientFactor);\r\n      gl_FragColor = vec4(color, 1.0);\r\n    }`\r\n\r\n    return new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        color1: {value: new THREE.Color(start)},\r\n        color2: {value: new THREE.Color(end)},\r\n        intensity: { value: intensity },  // Height of the gradient\r\n        gradientPower: { value: gradientPower },  // Height of the gradient\r\n        height: { value: height }  // Height of the gradient\r\n      },\r\n      vertexShader: vertexShader,\r\n      fragmentShader: fragmentShader\r\n    })\r\n}\r\n\r\nconst radialGradient = (start=0xffffff,end=0x000000,exponent=1) =>{\r\n  let vertexShader = `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }`\r\n  let fragmentShader = `\r\n    varying vec2 vUv;\r\n    uniform vec3 color1;\r\n    uniform vec3 color2;\r\n    uniform float exponent;\r\n    void main() {\r\n      vec2 center = vec2(0.5, 0.5);\r\n      float dist = distance(vUv, center);\r\n      float adjustedDist = pow(dist, exponent);\r\n      gl_FragColor = vec4(mix(color1, color2, adjustedDist), 1.0);\r\n    }`\r\n\r\n    return new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        color1: {value: new THREE.Color(start)},\r\n        color2: {value: new THREE.Color(end)},\r\n        exponent: { value: exponent }\r\n      },\r\n      vertexShader: vertexShader,\r\n      fragmentShader: fragmentShader\r\n    })\r\n}\r\nexport {\r\n  linearGradient,\r\n  linearGradient2,\r\n  linearGradient3,\r\n  radialGradient,\r\n};\r\n","import * as THREE from 'three';\r\nimport { mergeBufferGeometries } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\r\n\r\n// console.log(mergeBufferGeometries);\r\nfunction adjustUVs(geometry) {\r\n  geometry.computeBoundingBox();\r\n  const uvAttribute = geometry.attributes.uv;\r\n  for (let i = 0; i < uvAttribute.count; i++) {\r\n    const u = uvAttribute.getX(i);\r\n    const v = uvAttribute.getY(i);\r\n    uvAttribute.setXY(i, u, v*2);\r\n  }\r\n  uvAttribute.needsUpdate = true;\r\n}\r\n\r\nconst hollowCylinder =(outerRadius=10,width=2,height=2,curve=64) =>{\r\n\r\n  let cylinderShape = new THREE.Shape();\r\n  cylinderShape.moveTo(outerRadius,0);\r\n  cylinderShape.absarc(0,0,outerRadius,0,Math.PI*2,false);\r\n\r\n  let cylinderHole = new THREE.Path();\r\n  cylinderHole.moveTo(outerRadius - width,0);\r\n  cylinderHole.absarc(0, 0, outerRadius - width, 0, Math.PI * 2, true);\r\n  cylinderShape.holes.push(cylinderHole);\r\n\r\n  let geometry = new THREE.ExtrudeGeometry(cylinderShape, {\r\n    depth: height,\r\n    steps: 32,\r\n    curveSegments: curve,\r\n    bevelEnabled: false,\r\n  });\r\n\r\n  geometry.center();\r\n\r\n  // adjustUVs(geometry);\r\n  return geometry;\r\n}\r\n\r\nfunction solidBox(width=15,height=25,depth=1,radius=0.2, segments) {\r\n  const shape = new THREE.Shape();\r\n\r\n  // Create a rectangle with rounded corners\r\n  shape.moveTo(-width/2 + radius, -height/2);\r\n  shape.lineTo(width/2 - radius, -height/2);\r\n  shape.quadraticCurveTo(width/2, -height/2, width/2, -height/2 + radius);\r\n  shape.lineTo(width/2, height/2 - radius);\r\n  shape.quadraticCurveTo(width/2, height/2, width/2 - radius, height/2);\r\n  shape.lineTo(-width/2 + radius, height/2);\r\n  shape.quadraticCurveTo(-width/2, height/2, -width/2, height/2 - radius);\r\n  shape.lineTo(-width/2, -height/2 + radius);\r\n  shape.quadraticCurveTo(-width/2, -height/2, -width/2 + radius, -height/2);\r\n\r\n  // Extrude the shape\r\n  const extrudeSettings = {\r\n    depth: depth,\r\n    bevelEnabled: true,\r\n    bevelThickness: radius,\r\n    bevelSize: radius,\r\n    bevelSegments: segments,\r\n  };\r\n\r\n  const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\r\n  geometry.center();\r\n  return geometry;\r\n}\r\nfunction solidBox2(width=15,height=25,depth=1,frontRadius=0.2,sideRadius=1,segments) {\r\n  const shape = new THREE.Shape();\r\n\r\n  // Front face with custom roundness\r\n  shape.moveTo(-width/2 + sideRadius, -height/2);\r\n  shape.lineTo(width/2 - sideRadius, -height/2);\r\n  shape.quadraticCurveTo(width/2, -height/2, width/2, -height/2 + sideRadius);\r\n  shape.lineTo(width/2, height/2 - sideRadius);\r\n  shape.quadraticCurveTo(width/2, height/2, width/2 - sideRadius, height/2);\r\n  shape.lineTo(-width/2 + sideRadius, height/2);\r\n  shape.quadraticCurveTo(-width/2, height/2, -width/2, height/2 - sideRadius);\r\n  shape.lineTo(-width/2, -height/2 + sideRadius);\r\n  shape.quadraticCurveTo(-width/2, -height/2, -width/2 + sideRadius, -height/2);\r\n\r\n  // Extrude settings\r\n  const extrudeSettings = {\r\n    depth: depth,\r\n    bevelEnabled: true,\r\n    bevelThickness: frontRadius,\r\n    bevelSize: frontRadius,\r\n    bevelSegments: segments,\r\n    bevelOffset: 0, // Offset bevel for better control\r\n  };\r\n\r\n  // Generate geometry\r\n  const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\r\n  geometry.center();\r\n  return geometry;\r\n}\r\n\r\nfunction solidBox3(width=15,height=25,depth=1,frontRadius=0.2,sideRadius=1,segments) {\r\n  const shape = new THREE.Shape();\r\n\r\n  // Front face with custom roundness\r\n  shape.moveTo(-width/2 + sideRadius, -height/2);\r\n  shape.lineTo(width/2 - sideRadius, -height/2);\r\n  shape.quadraticCurveTo(width/2, -height/2, width/2, -height/2 + sideRadius);\r\n  shape.lineTo(width/2, height/2 - sideRadius);\r\n  shape.quadraticCurveTo(width/2, height/2, width/2 - sideRadius, height/2);\r\n  shape.lineTo(-width/2 + sideRadius, height/2);\r\n  shape.quadraticCurveTo(-width/2, height/2, -width/2, height/2 - sideRadius);\r\n  shape.lineTo(-width/2, -height/2 + sideRadius);\r\n  shape.quadraticCurveTo(-width/2, -height/2, -width/2 + sideRadius, -height/2);\r\n\r\n\r\n   let holeWidth = 4;\r\n   let holeRadius = 1;\r\n   let holeTop =  height/2 - holeRadius;\r\n\r\n   let _holeRadius = 0.707*holeRadius;\r\n   let holePath = new THREE.Path();\r\n   holePath.moveTo(-holeWidth/2, holeTop);\r\n   // holePath.lineTo(-_holeRadius, holeTop);\r\n   // holePath.arc(_holeRadius,0,holeRadius, Math.PI*0.75,Math.PI/4, true);\r\n   holePath.absarc(0,holeTop-holeRadius/2,holeRadius,Math.PI*5/6,Math.PI/6, true)\r\n   holePath.lineTo(holeWidth/2, holeTop);\r\n   holePath.arc(0, -holeRadius, holeRadius, Math.PI/2, -Math.PI/2, true);\r\n   holePath.lineTo(-holeWidth/2, holeTop - 2*holeRadius);\r\n   holePath.arc(0, holeRadius, holeRadius, -Math.PI/2, Math.PI/2, true);\r\n   holePath.closePath();\r\n\r\n   shape.holes.push(holePath);\r\n\r\n  // Extrude settings\r\n  const extrudeSettings = {\r\n    depth: depth,\r\n    bevelEnabled: true,\r\n    bevelThickness: frontRadius,\r\n    bevelSize: frontRadius,\r\n    bevelSegments: segments,\r\n    bevelOffset: 0, // Offset bevel for better control\r\n  };\r\n\r\n  // Generate geometry\r\n  const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\r\n  geometry.center();\r\n  return geometry;\r\n}\r\n\r\nfunction hollowBox(width=15,height=25,depth=1,padding=1,radius=0.0,sideRadius=0) {\r\n  const shape = new THREE.Shape();\r\n  shape.moveTo(-width/2 + sideRadius, -height/2);\r\n  shape.lineTo(width/2 - sideRadius, -height/2);\r\n  shape.quadraticCurveTo(width/2, -height/2, width/2, -height/2 + sideRadius);\r\n  shape.lineTo(width/2, height/2 - sideRadius);\r\n  shape.quadraticCurveTo(width/2, height/2, width/2 - sideRadius, height/2);\r\n  shape.lineTo(-width/2 + sideRadius, height/2);\r\n  shape.quadraticCurveTo(-width/2, height/2, -width/2, height/2 - sideRadius);\r\n  shape.lineTo(-width/2, -height/2 + sideRadius);\r\n  shape.quadraticCurveTo(-width/2, -height/2, -width/2 + sideRadius, -height/2);\r\n  shape.closePath();\r\n\r\n  // Inner Rectangle (Hole)\r\n  let innerWidth = width- 2*padding;\r\n  let innerHeight = height- 2*padding;\r\n  const holes = new THREE.Path();\r\n  holes.moveTo(-innerWidth / 2, -innerHeight / 2);\r\n  holes.lineTo(innerWidth / 2, -innerHeight / 2);\r\n  holes.lineTo(innerWidth / 2, innerHeight / 2);\r\n  holes.lineTo(-innerWidth / 2, innerHeight / 2);\r\n  holes.lineTo(-innerWidth / 2, -innerHeight / 2);\r\n  shape.holes.push(holes);\r\n\r\n  // Extrude the shape\r\n  const extrudeSettings = {\r\n    depth: depth,\r\n    bevelEnabled: true,\r\n    bevelThickness: radius,\r\n    bevelSize: radius,\r\n    bevelSegments: 8,\r\n  };\r\n\r\n  const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\r\n  geometry.center();\r\n  return geometry;\r\n}\r\n\r\nfunction hollowBox2(width=15,height=25,depth=1,padding=1,radius=0.0,sideRadius=0) {\r\n  const shape = new THREE.Shape();\r\n  shape.moveTo(-width/2 + sideRadius, -height/2);\r\n  shape.lineTo(width/2 - sideRadius, -height/2);\r\n  shape.quadraticCurveTo(width/2, -height/2, width/2, -height/2 + sideRadius);\r\n  shape.lineTo(width/2, height/2 - sideRadius);\r\n  shape.quadraticCurveTo(width/2, height/2, width/2 - sideRadius, height/2);\r\n  shape.lineTo(-width/2 + sideRadius, height/2);\r\n  shape.quadraticCurveTo(-width/2, height/2, -width/2, height/2 - sideRadius);\r\n  shape.lineTo(-width/2, -height/2 + sideRadius);\r\n  shape.quadraticCurveTo(-width/2, -height/2, -width/2 + sideRadius, -height/2);\r\n  shape.closePath();\r\n\r\n  // Inner Rectangle (Hole)\r\n  let innerWidth = width- 2*padding;\r\n  let innerHeight = height- 2*padding;\r\n  const holes = new THREE.Path();\r\n  holes.moveTo(-innerWidth/2 + sideRadius, -innerHeight/2);\r\n  holes.lineTo(innerWidth/2 - sideRadius, -innerHeight/2);\r\n  holes.quadraticCurveTo(innerWidth/2, -innerHeight/2, innerWidth/2, -innerHeight/2 + sideRadius);\r\n  holes.lineTo(innerWidth/2, innerHeight/2 - sideRadius);\r\n  holes.quadraticCurveTo(innerWidth/2, innerHeight/2, innerWidth/2 - sideRadius, innerHeight/2);\r\n  holes.lineTo(-innerWidth/2 + sideRadius, innerHeight/2);\r\n  holes.quadraticCurveTo(-innerWidth/2, innerHeight/2, -innerWidth/2, innerHeight/2 - sideRadius);\r\n  holes.lineTo(-innerWidth/2, -innerHeight/2 + sideRadius);\r\n  holes.quadraticCurveTo(-innerWidth/2, -innerHeight/2, -innerWidth/2 + sideRadius, -innerHeight/2);\r\n  holes.closePath();\r\n  shape.holes.push(holes);\r\n\r\n  // Extrude the shape\r\n  const extrudeSettings = {\r\n    depth: depth,\r\n    bevelEnabled: true,\r\n    bevelThickness: radius,\r\n    bevelSize: radius,\r\n    bevelSegments: 8,\r\n  };\r\n\r\n  const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\r\n  geometry.center();\r\n  return geometry;\r\n}\r\n\r\nfunction hollowBox3(width=15,height=25,depth=1,padding=1,radius=0.0,sideRadius=0) {\r\n  const shape = new THREE.Shape();\r\n  shape.moveTo(-width/2 + sideRadius, -height/2);\r\n  shape.lineTo(width/2 - sideRadius, -height/2);\r\n  shape.quadraticCurveTo(width/2, -height/2, width/2, -height/2 + sideRadius);\r\n  shape.lineTo(width/2, height/2 - sideRadius);\r\n  shape.quadraticCurveTo(width/2, height/2, width/2 - sideRadius, height/2);\r\n  shape.lineTo(-width/2 + sideRadius, height/2);\r\n  shape.quadraticCurveTo(-width/2, height/2, -width/2, height/2 - sideRadius);\r\n  shape.lineTo(-width/2, -height/2 + sideRadius);\r\n  shape.quadraticCurveTo(-width/2, -height/2, -width/2 + sideRadius, -height/2);\r\n  shape.closePath();\r\n\r\n  // Inner Rectangle (Hole)\r\n  let innerWidth = width- 2*padding;\r\n  let innerHeight = height- 2*padding;\r\n  const holes = new THREE.Path();\r\n  holes.moveTo(-innerWidth/2 + sideRadius, -innerHeight/2);\r\n  holes.lineTo(innerWidth/2 - sideRadius, -innerHeight/2);\r\n  holes.quadraticCurveTo(innerWidth/2, -innerHeight/2, innerWidth/2, -innerHeight/2 + sideRadius);\r\n  holes.lineTo(innerWidth/2, innerHeight/2 - sideRadius);\r\n  holes.quadraticCurveTo(innerWidth/2, innerHeight/2, innerWidth/2 - sideRadius, innerHeight/2);\r\n  holes.lineTo(-innerWidth/2 + sideRadius, innerHeight/2);\r\n  holes.quadraticCurveTo(-innerWidth/2, innerHeight/2, -innerWidth/2, innerHeight/2 - sideRadius);\r\n  holes.lineTo(-innerWidth/2, -innerHeight/2 + sideRadius);\r\n  holes.quadraticCurveTo(-innerWidth/2, -innerHeight/2, -innerWidth/2 + sideRadius, -innerHeight/2);\r\n  holes.closePath();\r\n  shape.holes.push(holes);\r\n\r\n  // Extrude the shape\r\n  // const extrudeSettings = {\r\n  //   depth: depth,\r\n  //   bevelEnabled: true,\r\n  //   bevelThickness: radius,\r\n  //   bevelSize: radius,\r\n  //   bevelSegments: 8,\r\n  // };\r\n  //\r\n  // const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\r\n\r\n  // return geometry;\r\n\r\n  // Extrude Settings\r\n  const outerExtrudeSettings = {\r\n      steps: 1,\r\n      depth: 0,         // Outer depth is zero (flat surface)\r\n      bevelEnabled: false,\r\n  };\r\n\r\n  const innerExtrudeSettings = {\r\n      steps: 1,\r\n      depth: 2,         // Inner depth is positive\r\n      bevelEnabled: false,\r\n  };\r\n\r\n  // Create Geometries\r\n  const outerGeometry = new THREE.ExtrudeGeometry(shape, outerExtrudeSettings);\r\n  const innerGeometry = new THREE.ExtrudeGeometry(holes, innerExtrudeSettings);\r\n\r\n  // Translate inner geometry to align with the outer geometry\r\n  innerGeometry.translate(0, 0, 0);\r\n\r\n  // Merge Outer and Inner Geometries\r\n  // const geometry = BufferGeometryUtils.mergeBufferGeometries([outerGeometry, innerGeometry]);\r\n  // return geometry;\r\n\r\n  // geometry.center();\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport {\r\n  hollowCylinder,\r\n  solidBox,\r\n  solidBox2,\r\n  solidBox3,\r\n  hollowBox,\r\n  hollowBox2,\r\n  hollowBox3,\r\n};\r\n","import * as THREE from 'three';\r\nimport { CSG } from 'three-csg-ts';\r\n\r\n\r\nfunction hollowBox3Face(w=15,h=25,d=1,t=1,r=0.2){\r\n  let outerBox = new THREE.Mesh(new THREE.BoxGeometry(w+t*2,h+t*2,d+t));\r\n  let innerBox = new THREE.Mesh(new THREE.BoxGeometry(w,h,d));\r\n\r\n  outerBox.position.z = t/2;\r\n  outerBox.updateMatrix();\r\n  innerBox.updateMatrix();\r\n\r\n  const csg = CSG.subtract(outerBox,innerBox);\r\n  csg.geometry.center()\r\n  return csg;\r\n}\r\n\r\nfunction hollowBox3Face2(w=15,h=25,d=1,t=1,r=0.2){\r\n  let topLayer = new THREE.Mesh(new THREE.BoxGeometry(w+t*2,h,t));\r\n  let leftLayer = new THREE.Mesh(new THREE.BoxGeometry(t,h,d));\r\n  let rightLayer = new THREE.Mesh(new THREE.BoxGeometry(t,h,d));\r\n\r\n  let edge = new THREE.CylinderGeometry(r,r,h, 8 );\r\n\r\n\r\n  leftLayer.position.set(-w/2-t/2,0,-d/2-t/2);\r\n  rightLayer.position.set(w/2+t/2,0,-d/2-t/2);\r\n\r\n  topLayer.updateMatrix();\r\n  leftLayer.updateMatrix();\r\n  rightLayer.updateMatrix();\r\n\r\n  // let csg = CSG.union(topLayer,rightLayer);\r\n  // csg = CSG.union(csg,leftLayer);\r\n  // return csg;\r\n\r\n  let csg = CSG.fromMesh(topLayer).union(CSG.fromMesh(rightLayer)).union(CSG.fromMesh(leftLayer));\r\n\r\n  csg = CSG.toMesh(csg, new THREE.Matrix4())\r\n  csg.geometry.center();\r\n  return csg;\r\n}\r\n\r\nexport {\r\n  hollowBox3Face,\r\n  hollowBox3Face2,\r\n};\r\n","import * as Geometry1 from './geometry1.js';\r\nimport * as Geometry2 from './geometry2.js';\r\n\r\nlet result = {...Geometry1,...Geometry2}\r\nexport default result;\r\n"],"names":["renderStep","settings","materials","radius","position","height","stepSize","stripColor","options","padLeft","stripWidth","stripDepth","cylinderMaterial","stripShadowMaterial","pivot","THREE","lightMaterial","toneMapped","color","emissive","emissiveIntensity","outerCylinder","Geometry","hollowCylinder","rotation","x","Math","PI","set","add","stripLight","layers","enable","outerInnerCylinder","innerCylinder","castShadow","receiveShadow","backFill","backCover","_options$animated","_options$lightOn","_options$colors$base","_options$colors","_options$colors$top","_options$colors2","_options$colors$middl","_options$colors3","_options$colors$botto","_options$colors4","_options$colors$strip","_options$colors5","_options$radius","_options$position","_options$height","_options$stepSize","animated","lightOn","colors","base","top","middle","bottom","strip","metalness","roughness","clearcoat","clearcoatRoughness","reflectivity","clone","turnOnLight","lcolor","index","children","material","Material","side","setTimeout","turnOnShadow","sColor","animationOn","animationOff","forEach","item","i","mesh","j","constructor","_options$corners","_this","corners","this","z","loadMaterials","textures","push","Textures","shininess","specular","gradientMaterial","map","gradientMaterial2","renderBase","timeout","setup","isLight","arguments","length","undefined","isAnimated","start","stop","clearTimeout","dispose","traverse","child","geometry","Array","isArray","mat","texture","parent","remove","cylinderMaterial2","uniforms","color2","value","gradientMaterial3","color1","baseColor","lightMaterial2","_options$colors$botto2","scene","planeMaterial1","planeMaterial2","backWall","floor","RectAreaLightUniformsLib","init","ambientLight","hemisphereLight","hemisphereLightHelper","ceilingLight","lookAt","matrixAutoUpdate","ceilingLightHelper","RectAreaLightHelper","directionalLight","spotLight1","spotLight2","pointLight1","pointLight2","pointLight3","AdditiveBlendingShader","baseTexture","bloomTexture","vertexShader","fragmentShader","defines","sceneRef","setupRenderer","renderer","canvas","antialias","alpha","preserveDrawingBuffer","setSize","width","setPixelRatio","window","devicePixelRatio","setClearColor","toneMapping","toneMappingExposure","params","shadow","shadowMap","enabled","type","setupCamera","camera","setupScene","setupControls","controls","OrbitControls","target","enableDamping","dampingFactor","screenSpacePanning","maxDistance","minDistance","enableZoom","enableKeys","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","ROTATE","PAN","touches","ONE","TWO","DOLLY_PAN","update","setupComposer","renderPass","RenderPass","bloomparams","bloomLayer","bloomPass","UnrealBloomPass","strength","threshold","bloomComposer","EffectComposer","renderToScreen","addPass","outputPass","OutputPass","composer","blendPass","ShaderPass","renderTarget2","needsSwap","fxaaPass","FXAAShader","pixelRatio","getPixelRatio","disposeComposer","getScene","render","darkMaterial","obj","isMesh","test","uuid","handleResize","current","offsetWidth","innerHeight","aspect","updateProjectionMatrix","guiInputs","bloomFolder","GUI","addFolder","self","listen","onChange","Number","step","exposure","_options$width","_options$depth","cubeRenderTarget","format","generateMipmaps","minFilter","cubeCamera","baseMaterial","glassMaterial","transmission","transparent","opacity","ior","thickness","envMapIntensity","depthWrite","renderPacket","depth","fR1","sR1","fR2","sR2","pD1","pD2","backLayer","solidBox3","hollowBox2","glassLayer","solidBox2","glassSticker","hollowBox3Face2","renderModel","addLights","async","_gltf","loader","GLTFLoader","gltf","loadAsync","require","e","Models","size","setFromObject","getSize","_scale","min","y","setZ","_glassMaterial","moldShape","scale","_m","console","log","light","animate","visible","copy","cubeTexture","load","backgroundImage","sphereTexture","toHexColor","concat","getHexString","startsWith","toString","gradientColor","stop1","stop2","createCanvas","ctx","getContext","clearRect","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","globalAlpha","globalCompositeOperation","drawImage","colorSpace","magFilter","wrapS","wrapT","needsUpdate","linearGradient","end","linearGradient2","linearGradient3","intensity","gradientPower","radialGradient","exponent","outerRadius","curve","cylinderShape","moveTo","absarc","cylinderHole","holes","steps","curveSegments","bevelEnabled","center","solidBox","segments","shape","lineTo","quadraticCurveTo","extrudeSettings","bevelThickness","bevelSize","bevelSegments","frontRadius","sideRadius","bevelOffset","holeTop","holePath","holeRadius","holeWidth","arc","closePath","hollowBox","padding","innerWidth","hollowBox3","translate","hollowBox3Face","w","h","d","t","outerBox","innerBox","updateMatrix","csg","CSG","subtract","r","topLayer","leftLayer","rightLayer","fromMesh","union","toMesh","Geometry1","Geometry2"],"sourceRoot":""}