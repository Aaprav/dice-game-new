{"version":3,"file":"static/js/982.03bdb5d0.chunk.js","mappings":"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","sources":["pages/line-art/index.jsx"],"sourcesContent":["import React, { Component} from 'react'\r\nimport '../../scss/main.scss'\r\n\r\nconst getRandom = (variation = 255 ,min = 0,round = true) =>{\r\n  min = variation >= min?min:0;\r\n  if(!round) return (Math.random()*(variation - min)) + min;\r\n  return Math.round((Math.random()*(variation - min)) + min)\r\n}\r\n\r\nconst baseBackground = (ctx) =>{\r\n  // ctx.imageSmoothingEnabled = true;\r\n  // ctx.imageSmoothingQuality = \"high\";\r\n  ctx.clearRect(0,0,ctx.canvas.width,ctx.canvas.height);\r\n  ctx.fillStyle = \"#222227\";\r\n  ctx.fillRect(0,0,ctx.canvas.width,ctx.canvas.height);\r\n  ctx.strokeStyle = \"#aaa\";\r\n  ctx.strokeRect(0,0,ctx.canvas.width,ctx.canvas.height);\r\n  ctx.lineWidth = 2;\r\n}\r\n\r\nclass LineArt extends Component  {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      height:1080,\r\n      width :1080,\r\n    }\r\n    this.canvasRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.title = \"Line Art || canvas\";\r\n\r\n    let{height,width } = this.state;\r\n    let canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\")\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    this.test()\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.title = \"Canvas Generative\";\r\n  }\r\n\r\n  test = () =>{\r\n    let{width,height} = this.state;\r\n    let canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    let gradient = ctx.createLinearGradient(0,0, 0,1.0*height);\r\n    gradient.addColorStop(0, \"#ED6065\");\r\n    // gradient.addColorStop(0.5, \"#ED6065\");\r\n    gradient.addColorStop(1, \"#355C5F\");\r\n    ctx.fillStyle = gradient;\r\n    ctx.fillRect(0, 0, width, height);\r\n\r\n    // Create an overlay to increase intensity\r\n  // ctx.globalAlpha = 1;\r\n  // ctx.globalCompositeOperation = 'overlay';\r\n  // ctx.drawImage(canvas, 0, 0);\r\n\r\n  // ctx.globalCompositeOperation = 'source-over';\r\n  // ctx.globalAlpha = 7.0;\r\n\r\n    // ctx.globalCompositeOperation = 'source-over';\r\n    // ctx.filter = 'blur(8px)';\r\n    // ctx.drawImage(canvas, 0, 0);\r\n    // ctx.filter = 'none';\r\n\r\n    // Apply gamma correction to boost vibrancy\r\n    // const imageData = ctx.getImageData(0, 0, width, height);\r\n    // const data = imageData.data;\r\n    // for (let i = 0; i < data.length; i += 4) {\r\n    //   data[i] = Math.pow(data[i] / 255, 1 / 2.2) * 255; // Red\r\n    //   data[i + 1] = Math.pow(data[i + 1] / 255, 1 / 2.2) * 255; // Green\r\n    //   data[i + 2] = Math.pow(data[i + 2] / 255, 1 / 2.2) * 255; // Blue\r\n    // }\r\n    // ctx.putImageData(imageData, 0, 0);\r\n\r\n  }\r\n\r\n  renderRect = () =>{\r\n\r\n    let{width,height} = this.state;\r\n    let canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    baseBackground(ctx);\r\n\r\n    let padding = 20;\r\n    let _width = width-2*padding;\r\n    let _height = height-2*padding;\r\n\r\n    for (var i = 0; i < getRandom(150,50); i++) {\r\n\r\n      let xLen = getRandom(_width,30);\r\n      let xPos = getRandom(_width,padding);\r\n\r\n      let yLen = getRandom(_height,30);\r\n      let yPos = getRandom(_height,padding);\r\n\r\n      if(xPos + xLen > _width){\r\n        if(xPos >= _width/2){\r\n          xPos = width - padding - xLen;\r\n        }else {\r\n          xLen = _width - xPos;\r\n          xPos = padding;\r\n        }\r\n      }\r\n\r\n      if(yPos + yLen > _height){\r\n        if(yPos >= _height/2){\r\n          yPos = height - padding - yLen;\r\n        }else {\r\n          yLen = _height - yPos;\r\n          yPos = padding;\r\n        }\r\n      }\r\n\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = \"rgba(\" + getRandom() + \",\" + getRandom() + \",\" + getRandom() + \")\";\r\n      ctx.strokeRect(xPos,yPos,xLen,yLen);\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  renderCircle = () =>{\r\n    let{width,height} = this.state;\r\n    let canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    baseBackground(ctx);\r\n\r\n\r\n    let padding = 20;\r\n    let coreRadius = getRandom(100,20);\r\n\r\n    for (var i = 0; i < getRandom(150,50); i++) {\r\n\r\n      let xPos = getRandom(coreRadius,0);\r\n      let yPos = ((coreRadius ** 2) - (xPos ** 2)) ** 0.5;\r\n      // xPos and yPos lies on edge of core circle\r\n      xPos = width/2 - (getRandom(1,0)*-1)*xPos;\r\n      yPos = height/2 - (getRandom(1,0)*-1)*yPos;\r\n\r\n      let maxXR = xPos >= width/2?width-padding-xPos:xPos-padding;\r\n      let maxYR = yPos >= height/2?height-padding-yPos:yPos-padding;\r\n      let cRadius = getRandom(Math.min(maxXR,maxYR),coreRadius);\r\n\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = \"rgba(\" + getRandom() + \",\" + getRandom() + \",\" + getRandom() + \")\";\r\n      ctx.arc(xPos,yPos,cRadius,0,2*Math.PI);\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  renderCroppedArc = () =>{\r\n\r\n    let{width,height} = this.state;\r\n    let canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    baseBackground(ctx);\r\n\r\n    let coreRadius = getRandom(100,20);\r\n    let startDeg = getRandom(Math.PI,0,false);\r\n    let xPos = width/2;\r\n    let yPos = height/2;\r\n\r\n    let padding = 20;\r\n    let maxR = Math.min(width,height)/2-padding;\r\n\r\n    for (var i = 0; i < getRandom(250,100); i++) {\r\n\r\n      let cRadius = getRandom(maxR,coreRadius);\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = \"rgba(\" + getRandom() + \",\" + getRandom() + \",\" + getRandom() + \")\";\r\n\r\n      ctx.arc(xPos,yPos,cRadius,startDeg,Math.PI+startDeg);\r\n      startDeg = startDeg +Math.PI;\r\n      ctx.stroke();\r\n    }\r\n\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"section__model main__margin\">\r\n        <div className=\"main__panel\">\r\n          <div className=\"canvas__panel\">\r\n            <canvas ref={this.canvasRef}/>\r\n          </div>\r\n          <div className=\"canvas__btns\">\r\n            <button onClick={this.renderRect}>1</button>\r\n            <button onClick={this.renderCircle}>2</button>\r\n            <button onClick={this.renderCroppedArc}>3</button>\r\n            <button onClick={this.smartRect}>4</button>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default LineArt;\r\n"],"names":["getRandom","variation","arguments","length","undefined","min","Math","round","random","baseBackground","ctx","clearRect","canvas","width","height","fillStyle","fillRect","strokeStyle","strokeRect","lineWidth","LineArt","Component","constructor","props","super","test","this","state","canvasRef","current","getContext","gradient","createLinearGradient","addColorStop","renderRect","padding","_width","_height","i","xLen","xPos","yLen","yPos","beginPath","stroke","renderCircle","coreRadius","maxXR","maxYR","cRadius","arc","PI","renderCroppedArc","startDeg","maxR","React","componentDidMount","document","title","componentWillUnmount","render","_jsx","className","children","_jsxs","ref","onClick","smartRect"],"sourceRoot":""}